
nucleo_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004084  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800420c  0800420c  0001420c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800423c  0800423c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800423c  0800423c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800423c  0800423c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004240  08004240  00014240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08004250  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08004250  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0c3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b3e  00000000  00000000  0002c0ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c30  00000000  00000000  0002dc40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  0002e870  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000176fb  00000000  00000000  0002f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009838  00000000  00000000  00046ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089c82  00000000  00000000  000502eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9f6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d0  00000000  00000000  000d9fe8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080041f4 	.word	0x080041f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080041f4 	.word	0x080041f4

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fbd0 	bl	8000970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f828 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fa0a 	bl	80005ec <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f9ea 	bl	80005b0 <MX_DMA_Init>
  MX_TIM3_Init();
 80001dc:	f000 f98c 	bl	80004f8 <MX_TIM3_Init>
  MX_TIM1_Init();
 80001e0:	f000 f8fa 	bl	80003d8 <MX_TIM1_Init>
  MX_ADC1_Init();
 80001e4:	f000 f87a 	bl	80002dc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001e8:	2100      	movs	r1, #0
 80001ea:	480a      	ldr	r0, [pc, #40]	; (8000214 <main+0x4c>)
 80001ec:	f003 fa42 	bl	8003674 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80001f0:	210c      	movs	r1, #12
 80001f2:	4809      	ldr	r0, [pc, #36]	; (8000218 <main+0x50>)
 80001f4:	f003 fa3e 	bl	8003674 <HAL_TIM_PWM_Start>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80001f8:	2100      	movs	r1, #0
 80001fa:	4808      	ldr	r0, [pc, #32]	; (800021c <main+0x54>)
 80001fc:	f000 feca 	bl	8000f94 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_values, 2);
 8000200:	2202      	movs	r2, #2
 8000202:	4907      	ldr	r1, [pc, #28]	; (8000220 <main+0x58>)
 8000204:	4805      	ldr	r0, [pc, #20]	; (800021c <main+0x54>)
 8000206:	f000 fdeb 	bl	8000de0 <HAL_ADC_Start_DMA>
  while (1)
  {
//  	HAL_ADC_Start(&hadc1);
//  	HAL_ADC_PollForConversion(&hadc1, 1);
//  	AD_RES = HAL_ADC_GetValue(&hadc1);
	HAL_Delay(100);
 800020a:	2064      	movs	r0, #100	; 0x64
 800020c:	f000 fc16 	bl	8000a3c <HAL_Delay>
 8000210:	e7fb      	b.n	800020a <main+0x42>
 8000212:	bf00      	nop
 8000214:	20000100 	.word	0x20000100
 8000218:	2000002c 	.word	0x2000002c
 800021c:	2000006c 	.word	0x2000006c
 8000220:	20000140 	.word	0x20000140

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b096      	sub	sp, #88	; 0x58
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800022e:	2228      	movs	r2, #40	; 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f003 ffd6 	bl	80041e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	f107 031c 	add.w	r3, r7, #28
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]
 8000256:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000258:	2302      	movs	r3, #2
 800025a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025c:	2301      	movs	r3, #1
 800025e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000260:	2310      	movs	r3, #16
 8000262:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000264:	2302      	movs	r3, #2
 8000266:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000268:	2300      	movs	r3, #0
 800026a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 800026c:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8000270:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000272:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000276:	4618      	mov	r0, r3
 8000278:	f001 ffbc 	bl	80021f4 <HAL_RCC_OscConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000282:	f000 f9d7 	bl	8000634 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000286:	230f      	movs	r3, #15
 8000288:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028a:	2302      	movs	r3, #2
 800028c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000296:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800029c:	f107 031c 	add.w	r3, r7, #28
 80002a0:	2102      	movs	r1, #2
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 feae 	bl	8003004 <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002ae:	f000 f9c1 	bl	8000634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 80002b2:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 80002b6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002bc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002be:	2300      	movs	r3, #0
 80002c0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f003 f883 	bl	80033d0 <HAL_RCCEx_PeriphCLKConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80002d0:	f000 f9b0 	bl	8000634 <Error_Handler>
  }
}
 80002d4:	bf00      	nop
 80002d6:	3758      	adds	r7, #88	; 0x58
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08a      	sub	sp, #40	; 0x28
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002e2:	f107 031c 	add.w	r3, r7, #28
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]
 80002fc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002fe:	4b35      	ldr	r3, [pc, #212]	; (80003d4 <MX_ADC1_Init+0xf8>)
 8000300:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000304:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000306:	4b33      	ldr	r3, [pc, #204]	; (80003d4 <MX_ADC1_Init+0xf8>)
 8000308:	2200      	movs	r2, #0
 800030a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800030c:	4b31      	ldr	r3, [pc, #196]	; (80003d4 <MX_ADC1_Init+0xf8>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000312:	4b30      	ldr	r3, [pc, #192]	; (80003d4 <MX_ADC1_Init+0xf8>)
 8000314:	2201      	movs	r2, #1
 8000316:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000318:	4b2e      	ldr	r3, [pc, #184]	; (80003d4 <MX_ADC1_Init+0xf8>)
 800031a:	2201      	movs	r2, #1
 800031c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031e:	4b2d      	ldr	r3, [pc, #180]	; (80003d4 <MX_ADC1_Init+0xf8>)
 8000320:	2200      	movs	r2, #0
 8000322:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000326:	4b2b      	ldr	r3, [pc, #172]	; (80003d4 <MX_ADC1_Init+0xf8>)
 8000328:	2200      	movs	r2, #0
 800032a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800032c:	4b29      	ldr	r3, [pc, #164]	; (80003d4 <MX_ADC1_Init+0xf8>)
 800032e:	2201      	movs	r2, #1
 8000330:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000332:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <MX_ADC1_Init+0xf8>)
 8000334:	2200      	movs	r2, #0
 8000336:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000338:	4b26      	ldr	r3, [pc, #152]	; (80003d4 <MX_ADC1_Init+0xf8>)
 800033a:	2202      	movs	r2, #2
 800033c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800033e:	4b25      	ldr	r3, [pc, #148]	; (80003d4 <MX_ADC1_Init+0xf8>)
 8000340:	2201      	movs	r2, #1
 8000342:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000346:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <MX_ADC1_Init+0xf8>)
 8000348:	2204      	movs	r2, #4
 800034a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800034c:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <MX_ADC1_Init+0xf8>)
 800034e:	2200      	movs	r2, #0
 8000350:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000352:	4b20      	ldr	r3, [pc, #128]	; (80003d4 <MX_ADC1_Init+0xf8>)
 8000354:	2200      	movs	r2, #0
 8000356:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000358:	481e      	ldr	r0, [pc, #120]	; (80003d4 <MX_ADC1_Init+0xf8>)
 800035a:	f000 fbaf 	bl	8000abc <HAL_ADC_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000364:	f000 f966 	bl	8000634 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000368:	2300      	movs	r3, #0
 800036a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800036c:	f107 031c 	add.w	r3, r7, #28
 8000370:	4619      	mov	r1, r3
 8000372:	4818      	ldr	r0, [pc, #96]	; (80003d4 <MX_ADC1_Init+0xf8>)
 8000374:	f001 f93a 	bl	80015ec <HAL_ADCEx_MultiModeConfigChannel>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800037e:	f000 f959 	bl	8000634 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000382:	2301      	movs	r3, #1
 8000384:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000386:	2301      	movs	r3, #1
 8000388:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800038a:	2300      	movs	r3, #0
 800038c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	4619      	mov	r1, r3
 800039e:	480d      	ldr	r0, [pc, #52]	; (80003d4 <MX_ADC1_Init+0xf8>)
 80003a0:	f000 fe62 	bl	8001068 <HAL_ADC_ConfigChannel>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003aa:	f000 f943 	bl	8000634 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003ae:	2302      	movs	r3, #2
 80003b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003b2:	2302      	movs	r3, #2
 80003b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	4619      	mov	r1, r3
 80003ba:	4806      	ldr	r0, [pc, #24]	; (80003d4 <MX_ADC1_Init+0xf8>)
 80003bc:	f000 fe54 	bl	8001068 <HAL_ADC_ConfigChannel>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80003c6:	f000 f935 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	3728      	adds	r7, #40	; 0x28
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	2000006c 	.word	0x2000006c

080003d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b096      	sub	sp, #88	; 0x58
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]
 80003f8:	611a      	str	r2, [r3, #16]
 80003fa:	615a      	str	r2, [r3, #20]
 80003fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	222c      	movs	r2, #44	; 0x2c
 8000402:	2100      	movs	r1, #0
 8000404:	4618      	mov	r0, r3
 8000406:	f003 feed 	bl	80041e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800040a:	4b39      	ldr	r3, [pc, #228]	; (80004f0 <MX_TIM1_Init+0x118>)
 800040c:	4a39      	ldr	r2, [pc, #228]	; (80004f4 <MX_TIM1_Init+0x11c>)
 800040e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6-1;
 8000410:	4b37      	ldr	r3, [pc, #220]	; (80004f0 <MX_TIM1_Init+0x118>)
 8000412:	2205      	movs	r2, #5
 8000414:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000416:	4b36      	ldr	r3, [pc, #216]	; (80004f0 <MX_TIM1_Init+0x118>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800041c:	4b34      	ldr	r3, [pc, #208]	; (80004f0 <MX_TIM1_Init+0x118>)
 800041e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000422:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000424:	4b32      	ldr	r3, [pc, #200]	; (80004f0 <MX_TIM1_Init+0x118>)
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800042a:	4b31      	ldr	r3, [pc, #196]	; (80004f0 <MX_TIM1_Init+0x118>)
 800042c:	2200      	movs	r2, #0
 800042e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000430:	4b2f      	ldr	r3, [pc, #188]	; (80004f0 <MX_TIM1_Init+0x118>)
 8000432:	2200      	movs	r2, #0
 8000434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000436:	482e      	ldr	r0, [pc, #184]	; (80004f0 <MX_TIM1_Init+0x118>)
 8000438:	f003 f8f0 	bl	800361c <HAL_TIM_PWM_Init>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000442:	f000 f8f7 	bl	8000634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000446:	2300      	movs	r3, #0
 8000448:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800044a:	2300      	movs	r3, #0
 800044c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800044e:	2300      	movs	r3, #0
 8000450:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000452:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000456:	4619      	mov	r1, r3
 8000458:	4825      	ldr	r0, [pc, #148]	; (80004f0 <MX_TIM1_Init+0x118>)
 800045a:	f003 fdb9 	bl	8003fd0 <HAL_TIMEx_MasterConfigSynchronization>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000464:	f000 f8e6 	bl	8000634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000468:	2360      	movs	r3, #96	; 0x60
 800046a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000470:	2300      	movs	r3, #0
 8000472:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000474:	2300      	movs	r3, #0
 8000476:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000478:	2300      	movs	r3, #0
 800047a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800047c:	2300      	movs	r3, #0
 800047e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000480:	2300      	movs	r3, #0
 8000482:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000484:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000488:	2200      	movs	r2, #0
 800048a:	4619      	mov	r1, r3
 800048c:	4818      	ldr	r0, [pc, #96]	; (80004f0 <MX_TIM1_Init+0x118>)
 800048e:	f003 f943 	bl	8003718 <HAL_TIM_PWM_ConfigChannel>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000498:	f000 f8cc 	bl	8000634 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800049c:	2300      	movs	r3, #0
 800049e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004c2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	4619      	mov	r1, r3
 80004d0:	4807      	ldr	r0, [pc, #28]	; (80004f0 <MX_TIM1_Init+0x118>)
 80004d2:	f003 fdeb 	bl	80040ac <HAL_TIMEx_ConfigBreakDeadTime>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80004dc:	f000 f8aa 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004e0:	4803      	ldr	r0, [pc, #12]	; (80004f0 <MX_TIM1_Init+0x118>)
 80004e2:	f000 f96f 	bl	80007c4 <HAL_TIM_MspPostInit>

}
 80004e6:	bf00      	nop
 80004e8:	3758      	adds	r7, #88	; 0x58
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000100 	.word	0x20000100
 80004f4:	40012c00 	.word	0x40012c00

080004f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08a      	sub	sp, #40	; 0x28
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004fe:	f107 031c 	add.w	r3, r7, #28
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]
 8000518:	615a      	str	r2, [r3, #20]
 800051a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800051c:	4b22      	ldr	r3, [pc, #136]	; (80005a8 <MX_TIM3_Init+0xb0>)
 800051e:	4a23      	ldr	r2, [pc, #140]	; (80005ac <MX_TIM3_Init+0xb4>)
 8000520:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6-1;
 8000522:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <MX_TIM3_Init+0xb0>)
 8000524:	2205      	movs	r2, #5
 8000526:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000528:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <MX_TIM3_Init+0xb0>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <MX_TIM3_Init+0xb0>)
 8000530:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000534:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000536:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <MX_TIM3_Init+0xb0>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800053c:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <MX_TIM3_Init+0xb0>)
 800053e:	2200      	movs	r2, #0
 8000540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000542:	4819      	ldr	r0, [pc, #100]	; (80005a8 <MX_TIM3_Init+0xb0>)
 8000544:	f003 f86a 	bl	800361c <HAL_TIM_PWM_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800054e:	f000 f871 	bl	8000634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000552:	2300      	movs	r3, #0
 8000554:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000556:	2300      	movs	r3, #0
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	4619      	mov	r1, r3
 8000560:	4811      	ldr	r0, [pc, #68]	; (80005a8 <MX_TIM3_Init+0xb0>)
 8000562:	f003 fd35 	bl	8003fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800056c:	f000 f862 	bl	8000634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000570:	2360      	movs	r3, #96	; 0x60
 8000572:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8000574:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000578:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000582:	463b      	mov	r3, r7
 8000584:	220c      	movs	r2, #12
 8000586:	4619      	mov	r1, r3
 8000588:	4807      	ldr	r0, [pc, #28]	; (80005a8 <MX_TIM3_Init+0xb0>)
 800058a:	f003 f8c5 	bl	8003718 <HAL_TIM_PWM_ConfigChannel>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000594:	f000 f84e 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <MX_TIM3_Init+0xb0>)
 800059a:	f000 f913 	bl	80007c4 <HAL_TIM_MspPostInit>

}
 800059e:	bf00      	nop
 80005a0:	3728      	adds	r7, #40	; 0x28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	2000002c 	.word	0x2000002c
 80005ac:	40000400 	.word	0x40000400

080005b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_DMA_Init+0x38>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <MX_DMA_Init+0x38>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_DMA_Init+0x38>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	200b      	movs	r0, #11
 80005d4:	f001 facf 	bl	8001b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005d8:	200b      	movs	r0, #11
 80005da:	f001 fae8 	bl	8001bae <HAL_NVIC_EnableIRQ>

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_GPIO_Init+0x44>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <MX_GPIO_Init+0x44>)
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_GPIO_Init+0x44>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_GPIO_Init+0x44>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a08      	ldr	r2, [pc, #32]	; (8000630 <MX_GPIO_Init+0x44>)
 8000610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000614:	6153      	str	r3, [r2, #20]
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_GPIO_Init+0x44>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	683b      	ldr	r3, [r7, #0]

}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000

08000634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
	...

08000644 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <HAL_MspInit+0x44>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <HAL_MspInit+0x44>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <HAL_MspInit+0x44>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <HAL_MspInit+0x44>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a08      	ldr	r2, [pc, #32]	; (8000688 <HAL_MspInit+0x44>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066c:	61d3      	str	r3, [r2, #28]
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_MspInit+0x44>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000

0800068c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006ac:	d14c      	bne.n	8000748 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006ae:	4b28      	ldr	r3, [pc, #160]	; (8000750 <HAL_ADC_MspInit+0xc4>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a27      	ldr	r2, [pc, #156]	; (8000750 <HAL_ADC_MspInit+0xc4>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b25      	ldr	r3, [pc, #148]	; (8000750 <HAL_ADC_MspInit+0xc4>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b22      	ldr	r3, [pc, #136]	; (8000750 <HAL_ADC_MspInit+0xc4>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	4a21      	ldr	r2, [pc, #132]	; (8000750 <HAL_ADC_MspInit+0xc4>)
 80006cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d0:	6153      	str	r3, [r2, #20]
 80006d2:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <HAL_ADC_MspInit+0xc4>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006de:	2303      	movs	r3, #3
 80006e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e2:	2303      	movs	r3, #3
 80006e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f4:	f001 fc0c 	bl	8001f10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006f8:	4b16      	ldr	r3, [pc, #88]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 80006fa:	4a17      	ldr	r2, [pc, #92]	; (8000758 <HAL_ADC_MspInit+0xcc>)
 80006fc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 8000700:	2200      	movs	r2, #0
 8000702:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000704:	4b13      	ldr	r3, [pc, #76]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 8000712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000716:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 800071a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800071e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 8000722:	2220      	movs	r2, #32
 8000724:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072c:	4809      	ldr	r0, [pc, #36]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 800072e:	f001 fa58 	bl	8001be2 <HAL_DMA_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000738:	f7ff ff7c 	bl	8000634 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a05      	ldr	r2, [pc, #20]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 8000740:	639a      	str	r2, [r3, #56]	; 0x38
 8000742:	4a04      	ldr	r2, [pc, #16]	; (8000754 <HAL_ADC_MspInit+0xc8>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	; 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000
 8000754:	200000bc 	.word	0x200000bc
 8000758:	40020008 	.word	0x40020008

0800075c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <HAL_TIM_PWM_MspInit+0x5c>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d10c      	bne.n	8000788 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <HAL_TIM_PWM_MspInit+0x60>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a12      	ldr	r2, [pc, #72]	; (80007bc <HAL_TIM_PWM_MspInit+0x60>)
 8000774:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <HAL_TIM_PWM_MspInit+0x60>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000786:	e010      	b.n	80007aa <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <HAL_TIM_PWM_MspInit+0x64>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d10b      	bne.n	80007aa <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <HAL_TIM_PWM_MspInit+0x60>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	4a09      	ldr	r2, [pc, #36]	; (80007bc <HAL_TIM_PWM_MspInit+0x60>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	61d3      	str	r3, [r2, #28]
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <HAL_TIM_PWM_MspInit+0x60>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
}
 80007aa:	bf00      	nop
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40012c00 	.word	0x40012c00
 80007bc:	40021000 	.word	0x40021000
 80007c0:	40000400 	.word	0x40000400

080007c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a23      	ldr	r2, [pc, #140]	; (8000870 <HAL_TIM_MspPostInit+0xac>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d11e      	bne.n	8000824 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b23      	ldr	r3, [pc, #140]	; (8000874 <HAL_TIM_MspPostInit+0xb0>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a22      	ldr	r2, [pc, #136]	; (8000874 <HAL_TIM_MspPostInit+0xb0>)
 80007ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <HAL_TIM_MspPostInit+0xb0>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000810:	2306      	movs	r3, #6
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081e:	f001 fb77 	bl	8001f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000822:	e020      	b.n	8000866 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a13      	ldr	r2, [pc, #76]	; (8000878 <HAL_TIM_MspPostInit+0xb4>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d11b      	bne.n	8000866 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <HAL_TIM_MspPostInit+0xb0>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	4a10      	ldr	r2, [pc, #64]	; (8000874 <HAL_TIM_MspPostInit+0xb0>)
 8000834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000838:	6153      	str	r3, [r2, #20]
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_TIM_MspPostInit+0xb0>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000846:	2302      	movs	r3, #2
 8000848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000856:	2302      	movs	r3, #2
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	4806      	ldr	r0, [pc, #24]	; (800087c <HAL_TIM_MspPostInit+0xb8>)
 8000862:	f001 fb55 	bl	8001f10 <HAL_GPIO_Init>
}
 8000866:	bf00      	nop
 8000868:	3728      	adds	r7, #40	; 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40012c00 	.word	0x40012c00
 8000874:	40021000 	.word	0x40021000
 8000878:	40000400 	.word	0x40000400
 800087c:	48000400 	.word	0x48000400

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <MemManage_Handler+0x4>

0800089a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d4:	f000 f892 	bl	80009fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}

080008dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <DMA1_Channel1_IRQHandler+0x10>)
 80008e2:	f001 fa24 	bl	8001d2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200000bc 	.word	0x200000bc

080008f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <SystemInit+0x28>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fa:	4a07      	ldr	r2, [pc, #28]	; (8000918 <SystemInit+0x28>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <SystemInit+0x28>)
 8000906:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800090a:	609a      	str	r2, [r3, #8]
#endif
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800091c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000954 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000920:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000922:	e003      	b.n	800092c <LoopCopyDataInit>

08000924 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000926:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000928:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800092a:	3104      	adds	r1, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800092c:	480b      	ldr	r0, [pc, #44]	; (800095c <LoopForever+0xa>)
	ldr	r3, =_edata
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000930:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000932:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000934:	d3f6      	bcc.n	8000924 <CopyDataInit>
	ldr	r2, =_sbss
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000938:	e002      	b.n	8000940 <LoopFillZerobss>

0800093a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800093a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800093c:	f842 3b04 	str.w	r3, [r2], #4

08000940 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <LoopForever+0x16>)
	cmp	r2, r3
 8000942:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000944:	d3f9      	bcc.n	800093a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000946:	f7ff ffd3 	bl	80008f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094a:	f003 fc27 	bl	800419c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800094e:	f7ff fc3b 	bl	80001c8 <main>

08000952 <LoopForever>:

LoopForever:
    b LoopForever
 8000952:	e7fe      	b.n	8000952 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000954:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000958:	08004244 	.word	0x08004244
	ldr	r0, =_sdata
 800095c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000960:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000964:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000968:	2000014c 	.word	0x2000014c

0800096c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC1_2_IRQHandler>
	...

08000970 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_Init+0x28>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_Init+0x28>)
 800097a:	f043 0310 	orr.w	r3, r3, #16
 800097e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f001 f8ed 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000986:	2000      	movs	r0, #0
 8000988:	f000 f808 	bl	800099c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098c:	f7ff fe5a 	bl	8000644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40022000 	.word	0x40022000

0800099c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_InitTick+0x54>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_InitTick+0x58>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f001 f905 	bl	8001bca <HAL_SYSTICK_Config>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e00e      	b.n	80009e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d80a      	bhi.n	80009e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009d8:	f001 f8cd 	bl	8001b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009dc:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <HAL_InitTick+0x5c>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e000      	b.n	80009e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000004 	.word	0x20000004

080009fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_IncTick+0x20>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_IncTick+0x24>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_IncTick+0x24>)
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000148 	.word	0x20000148

08000a24 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <HAL_GetTick+0x14>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000148 	.word	0x20000148

08000a3c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a44:	f7ff ffee 	bl	8000a24 <HAL_GetTick>
 8000a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a54:	d005      	beq.n	8000a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_Delay+0x40>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4413      	add	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a62:	bf00      	nop
 8000a64:	f7ff ffde 	bl	8000a24 <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d8f7      	bhi.n	8000a64 <HAL_Delay+0x28>
  {
  }
}
 8000a74:	bf00      	nop
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000008 	.word	0x20000008

08000a80 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b09a      	sub	sp, #104	; 0x68
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000aca:	2300      	movs	r3, #0
 8000acc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d101      	bne.n	8000adc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e172      	b.n	8000dc2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 0310 	and.w	r3, r3, #16
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d176      	bne.n	8000bdc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d152      	bne.n	8000b9c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2200      	movs	r2, #0
 8000b06:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff fdbb 	bl	800068c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d13b      	bne.n	8000b9c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f000 feeb 	bl	8001900 <ADC_Disable>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	f003 0310 	and.w	r3, r3, #16
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d12f      	bne.n	8000b9c <HAL_ADC_Init+0xe0>
 8000b3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d12b      	bne.n	8000b9c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b4c:	f023 0302 	bic.w	r3, r3, #2
 8000b50:	f043 0202 	orr.w	r2, r3, #2
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	689a      	ldr	r2, [r3, #8]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000b66:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b76:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b78:	4b94      	ldr	r3, [pc, #592]	; (8000dcc <HAL_ADC_Init+0x310>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a94      	ldr	r2, [pc, #592]	; (8000dd0 <HAL_ADC_Init+0x314>)
 8000b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b82:	0c9a      	lsrs	r2, r3, #18
 8000b84:	4613      	mov	r3, r2
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b8e:	e002      	b.n	8000b96 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1f9      	bne.n	8000b90 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d007      	beq.n	8000bba <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000bb8:	d110      	bne.n	8000bdc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f023 0312 	bic.w	r3, r3, #18
 8000bc2:	f043 0210 	orr.w	r2, r3, #16
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f043 0201 	orr.w	r2, r3, #1
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	f003 0310 	and.w	r3, r3, #16
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	f040 80df 	bne.w	8000da8 <HAL_ADC_Init+0x2ec>
 8000bea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 80da 	bne.w	8000da8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f040 80d2 	bne.w	8000da8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000c0c:	f043 0202 	orr.w	r2, r3, #2
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c14:	4b6f      	ldr	r3, [pc, #444]	; (8000dd4 <HAL_ADC_Init+0x318>)
 8000c16:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c20:	d102      	bne.n	8000c28 <HAL_ADC_Init+0x16c>
 8000c22:	4b6d      	ldr	r3, [pc, #436]	; (8000dd8 <HAL_ADC_Init+0x31c>)
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	e002      	b.n	8000c2e <HAL_ADC_Init+0x172>
 8000c28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c2c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	f003 0303 	and.w	r3, r3, #3
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d108      	bne.n	8000c4e <HAL_ADC_Init+0x192>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d101      	bne.n	8000c4e <HAL_ADC_Init+0x192>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e000      	b.n	8000c50 <HAL_ADC_Init+0x194>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d11c      	bne.n	8000c8e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c54:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d010      	beq.n	8000c7c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d107      	bne.n	8000c76 <HAL_ADC_Init+0x1ba>
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d101      	bne.n	8000c76 <HAL_ADC_Init+0x1ba>
 8000c72:	2301      	movs	r3, #1
 8000c74:	e000      	b.n	8000c78 <HAL_ADC_Init+0x1bc>
 8000c76:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d108      	bne.n	8000c8e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c8c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	7e5b      	ldrb	r3, [r3, #25]
 8000c92:	035b      	lsls	r3, r3, #13
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c98:	2a01      	cmp	r2, #1
 8000c9a:	d002      	beq.n	8000ca2 <HAL_ADC_Init+0x1e6>
 8000c9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ca0:	e000      	b.n	8000ca4 <HAL_ADC_Init+0x1e8>
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	431a      	orrs	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d11b      	bne.n	8000cfa <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7e5b      	ldrb	r3, [r3, #25]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d109      	bne.n	8000cde <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	045a      	lsls	r2, r3, #17
 8000cd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cda:	663b      	str	r3, [r7, #96]	; 0x60
 8000cdc:	e00d      	b.n	8000cfa <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000ce6:	f043 0220 	orr.w	r2, r3, #32
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f043 0201 	orr.w	r2, r3, #1
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d007      	beq.n	8000d12 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f003 030c 	and.w	r3, r3, #12
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d114      	bne.n	8000d4a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	6812      	ldr	r2, [r2, #0]
 8000d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d2e:	f023 0302 	bic.w	r3, r3, #2
 8000d32:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	7e1b      	ldrb	r3, [r3, #24]
 8000d38:	039a      	lsls	r2, r3, #14
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	4313      	orrs	r3, r2
 8000d44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d46:	4313      	orrs	r3, r2
 8000d48:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <HAL_ADC_Init+0x320>)
 8000d52:	4013      	ands	r3, r2
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	6812      	ldr	r2, [r2, #0]
 8000d58:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000d5a:	430b      	orrs	r3, r1
 8000d5c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	691b      	ldr	r3, [r3, #16]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d10c      	bne.n	8000d80 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	f023 010f 	bic.w	r1, r3, #15
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	631a      	str	r2, [r3, #48]	; 0x30
 8000d7e:	e007      	b.n	8000d90 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f022 020f 	bic.w	r2, r2, #15
 8000d8e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f023 0303 	bic.w	r3, r3, #3
 8000d9e:	f043 0201 	orr.w	r2, r3, #1
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	641a      	str	r2, [r3, #64]	; 0x40
 8000da6:	e00a      	b.n	8000dbe <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	f023 0312 	bic.w	r3, r3, #18
 8000db0:	f043 0210 	orr.w	r2, r3, #16
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000db8:	2301      	movs	r3, #1
 8000dba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000dbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3768      	adds	r7, #104	; 0x68
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	431bde83 	.word	0x431bde83
 8000dd4:	50000300 	.word	0x50000300
 8000dd8:	50000100 	.word	0x50000100
 8000ddc:	fff0c007 	.word	0xfff0c007

08000de0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dec:	2300      	movs	r3, #0
 8000dee:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f040 80b9 	bne.w	8000f72 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d101      	bne.n	8000e0e <HAL_ADC_Start_DMA+0x2e>
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	e0b4      	b.n	8000f78 <HAL_ADC_Start_DMA+0x198>
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000e16:	4b5a      	ldr	r3, [pc, #360]	; (8000f80 <HAL_ADC_Start_DMA+0x1a0>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f003 031f 	and.w	r3, r3, #31
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 80a0 	bne.w	8000f64 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000e24:	68f8      	ldr	r0, [r7, #12]
 8000e26:	f000 fd0d 	bl	8001844 <ADC_Enable>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f040 8092 	bne.w	8000f5a <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e3e:	f023 0301 	bic.w	r3, r3, #1
 8000e42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e4a:	4b4d      	ldr	r3, [pc, #308]	; (8000f80 <HAL_ADC_Start_DMA+0x1a0>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f003 031f 	and.w	r3, r3, #31
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d004      	beq.n	8000e60 <HAL_ADC_Start_DMA+0x80>
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e5e:	d115      	bne.n	8000e8c <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d027      	beq.n	8000eca <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e8a:	e01e      	b.n	8000eca <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ea0:	d004      	beq.n	8000eac <HAL_ADC_Start_DMA+0xcc>
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a37      	ldr	r2, [pc, #220]	; (8000f84 <HAL_ADC_Start_DMA+0x1a4>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d10e      	bne.n	8000eca <HAL_ADC_Start_DMA+0xea>
 8000eac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d007      	beq.n	8000eca <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ec2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ed6:	d106      	bne.n	8000ee6 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000edc:	f023 0206 	bic.w	r2, r3, #6
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	645a      	str	r2, [r3, #68]	; 0x44
 8000ee4:	e002      	b.n	8000eec <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ef8:	4a23      	ldr	r2, [pc, #140]	; (8000f88 <HAL_ADC_Start_DMA+0x1a8>)
 8000efa:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f00:	4a22      	ldr	r2, [pc, #136]	; (8000f8c <HAL_ADC_Start_DMA+0x1ac>)
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f08:	4a21      	ldr	r2, [pc, #132]	; (8000f90 <HAL_ADC_Start_DMA+0x1b0>)
 8000f0a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	221c      	movs	r2, #28
 8000f12:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0210 	orr.w	r2, r2, #16
 8000f22:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68da      	ldr	r2, [r3, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f042 0201 	orr.w	r2, r2, #1
 8000f32:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3340      	adds	r3, #64	; 0x40
 8000f3e:	4619      	mov	r1, r3
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f000 fe94 	bl	8001c70 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0204 	orr.w	r2, r2, #4
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	e00d      	b.n	8000f76 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000f62:	e008      	b.n	8000f76 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000f70:	e001      	b.n	8000f76 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f72:	2302      	movs	r3, #2
 8000f74:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	50000300 	.word	0x50000300
 8000f84:	50000100 	.word	0x50000100
 8000f88:	08001779 	.word	0x08001779
 8000f8c:	080017f3 	.word	0x080017f3
 8000f90:	0800180f 	.word	0x0800180f

08000f94 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d101      	bne.n	8000fb0 <HAL_ADCEx_Calibration_Start+0x1c>
 8000fac:	2302      	movs	r3, #2
 8000fae:	e057      	b.n	8001060 <HAL_ADCEx_Calibration_Start+0xcc>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f000 fca1 	bl	8001900 <ADC_Disable>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d146      	bne.n	8001056 <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8000fdc:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d107      	bne.n	8000ff4 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ff2:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001002:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001004:	f7ff fd0e 	bl	8000a24 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800100a:	e014      	b.n	8001036 <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800100c:	f7ff fd0a 	bl	8000a24 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b0a      	cmp	r3, #10
 8001018:	d90d      	bls.n	8001036 <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f023 0312 	bic.w	r3, r3, #18
 8001022:	f043 0210 	orr.w	r2, r3, #16
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e014      	b.n	8001060 <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001044:	d0e2      	beq.n	800100c <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f023 0303 	bic.w	r3, r3, #3
 800104e:	f043 0201 	orr.w	r2, r3, #1
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800105e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001068:	b480      	push	{r7}
 800106a:	b09b      	sub	sp, #108	; 0x6c
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001082:	2b01      	cmp	r3, #1
 8001084:	d101      	bne.n	800108a <HAL_ADC_ConfigChannel+0x22>
 8001086:	2302      	movs	r3, #2
 8001088:	e2a5      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x56e>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b00      	cmp	r3, #0
 800109e:	f040 8289 	bne.w	80015b4 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	d81c      	bhi.n	80010e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	461a      	mov	r2, r3
 80010be:	231f      	movs	r3, #31
 80010c0:	4093      	lsls	r3, r2
 80010c2:	43db      	mvns	r3, r3
 80010c4:	4019      	ands	r1, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa00 f203 	lsl.w	r2, r0, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	430a      	orrs	r2, r1
 80010e0:	631a      	str	r2, [r3, #48]	; 0x30
 80010e2:	e063      	b.n	80011ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b09      	cmp	r3, #9
 80010ea:	d81e      	bhi.n	800112a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	3b1e      	subs	r3, #30
 8001100:	221f      	movs	r2, #31
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	4019      	ands	r1, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	4613      	mov	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	3b1e      	subs	r3, #30
 800111c:	fa00 f203 	lsl.w	r2, r0, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	430a      	orrs	r2, r1
 8001126:	635a      	str	r2, [r3, #52]	; 0x34
 8001128:	e040      	b.n	80011ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b0e      	cmp	r3, #14
 8001130:	d81e      	bhi.n	8001170 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	3b3c      	subs	r3, #60	; 0x3c
 8001146:	221f      	movs	r2, #31
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	4019      	ands	r1, r3
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	3b3c      	subs	r3, #60	; 0x3c
 8001162:	fa00 f203 	lsl.w	r2, r0, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	639a      	str	r2, [r3, #56]	; 0x38
 800116e:	e01d      	b.n	80011ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	3b5a      	subs	r3, #90	; 0x5a
 8001184:	221f      	movs	r2, #31
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	4019      	ands	r1, r3
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	4413      	add	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	3b5a      	subs	r3, #90	; 0x5a
 80011a0:	fa00 f203 	lsl.w	r2, r0, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f040 80e5 	bne.w	8001386 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b09      	cmp	r3, #9
 80011c2:	d91c      	bls.n	80011fe <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6999      	ldr	r1, [r3, #24]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	3b1e      	subs	r3, #30
 80011d6:	2207      	movs	r2, #7
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	4019      	ands	r1, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	6898      	ldr	r0, [r3, #8]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	3b1e      	subs	r3, #30
 80011f0:	fa00 f203 	lsl.w	r2, r0, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	619a      	str	r2, [r3, #24]
 80011fc:	e019      	b.n	8001232 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6959      	ldr	r1, [r3, #20]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4613      	mov	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	2207      	movs	r2, #7
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	4019      	ands	r1, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	6898      	ldr	r0, [r3, #8]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4613      	mov	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	fa00 f203 	lsl.w	r2, r0, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	430a      	orrs	r2, r1
 8001230:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	695a      	ldr	r2, [r3, #20]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	08db      	lsrs	r3, r3, #3
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	3b01      	subs	r3, #1
 8001250:	2b03      	cmp	r3, #3
 8001252:	d84f      	bhi.n	80012f4 <HAL_ADC_ConfigChannel+0x28c>
 8001254:	a201      	add	r2, pc, #4	; (adr r2, 800125c <HAL_ADC_ConfigChannel+0x1f4>)
 8001256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125a:	bf00      	nop
 800125c:	0800126d 	.word	0x0800126d
 8001260:	0800128f 	.word	0x0800128f
 8001264:	080012b1 	.word	0x080012b1
 8001268:	080012d3 	.word	0x080012d3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001272:	4b9e      	ldr	r3, [pc, #632]	; (80014ec <HAL_ADC_ConfigChannel+0x484>)
 8001274:	4013      	ands	r3, r2
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	0691      	lsls	r1, r2, #26
 800127c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800127e:	430a      	orrs	r2, r1
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800128a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800128c:	e07e      	b.n	800138c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001294:	4b95      	ldr	r3, [pc, #596]	; (80014ec <HAL_ADC_ConfigChannel+0x484>)
 8001296:	4013      	ands	r3, r2
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	0691      	lsls	r1, r2, #26
 800129e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012a0:	430a      	orrs	r2, r1
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012ac:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012ae:	e06d      	b.n	800138c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80012b6:	4b8d      	ldr	r3, [pc, #564]	; (80014ec <HAL_ADC_ConfigChannel+0x484>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	0691      	lsls	r1, r2, #26
 80012c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012c2:	430a      	orrs	r2, r1
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012ce:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012d0:	e05c      	b.n	800138c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80012d8:	4b84      	ldr	r3, [pc, #528]	; (80014ec <HAL_ADC_ConfigChannel+0x484>)
 80012da:	4013      	ands	r3, r2
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	6812      	ldr	r2, [r2, #0]
 80012e0:	0691      	lsls	r1, r2, #26
 80012e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012e4:	430a      	orrs	r2, r1
 80012e6:	431a      	orrs	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012f0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012f2:	e04b      	b.n	800138c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	069b      	lsls	r3, r3, #26
 8001304:	429a      	cmp	r2, r3
 8001306:	d107      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001316:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800131e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	069b      	lsls	r3, r3, #26
 8001328:	429a      	cmp	r2, r3
 800132a:	d107      	bne.n	800133c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800133a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001342:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	069b      	lsls	r3, r3, #26
 800134c:	429a      	cmp	r2, r3
 800134e:	d107      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800135e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001366:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	069b      	lsls	r3, r3, #26
 8001370:	429a      	cmp	r2, r3
 8001372:	d10a      	bne.n	800138a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001382:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001384:	e001      	b.n	800138a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001386:	bf00      	nop
 8001388:	e000      	b.n	800138c <HAL_ADC_ConfigChannel+0x324>
      break;
 800138a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	2b01      	cmp	r3, #1
 8001398:	d108      	bne.n	80013ac <HAL_ADC_ConfigChannel+0x344>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d101      	bne.n	80013ac <HAL_ADC_ConfigChannel+0x344>
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <HAL_ADC_ConfigChannel+0x346>
 80013ac:	2300      	movs	r3, #0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f040 810b 	bne.w	80015ca <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d00f      	beq.n	80013dc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2201      	movs	r2, #1
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	400a      	ands	r2, r1
 80013d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80013da:	e049      	b.n	8001470 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2201      	movs	r2, #1
 80013ea:	409a      	lsls	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	430a      	orrs	r2, r1
 80013f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b09      	cmp	r3, #9
 80013fc:	d91c      	bls.n	8001438 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6999      	ldr	r1, [r3, #24]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4613      	mov	r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4413      	add	r3, r2
 800140e:	3b1b      	subs	r3, #27
 8001410:	2207      	movs	r2, #7
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	4019      	ands	r1, r3
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	6898      	ldr	r0, [r3, #8]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4613      	mov	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	3b1b      	subs	r3, #27
 800142a:	fa00 f203 	lsl.w	r2, r0, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	619a      	str	r2, [r3, #24]
 8001436:	e01b      	b.n	8001470 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6959      	ldr	r1, [r3, #20]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	2207      	movs	r2, #7
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	4019      	ands	r1, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	6898      	ldr	r0, [r3, #8]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	4613      	mov	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	fa00 f203 	lsl.w	r2, r0, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <HAL_ADC_ConfigChannel+0x488>)
 8001472:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b10      	cmp	r3, #16
 800147a:	d105      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800147c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001484:	2b00      	cmp	r3, #0
 8001486:	d015      	beq.n	80014b4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800148c:	2b11      	cmp	r3, #17
 800148e:	d105      	bne.n	800149c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00b      	beq.n	80014b4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80014a0:	2b12      	cmp	r3, #18
 80014a2:	f040 8092 	bne.w	80015ca <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80014a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f040 808b 	bne.w	80015ca <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014bc:	d102      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x45c>
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <HAL_ADC_ConfigChannel+0x48c>)
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	e002      	b.n	80014ca <HAL_ADC_ConfigChannel+0x462>
 80014c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014c8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d10f      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x490>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d108      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x490>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e007      	b.n	80014fa <HAL_ADC_ConfigChannel+0x492>
 80014ea:	bf00      	nop
 80014ec:	83fff000 	.word	0x83fff000
 80014f0:	50000300 	.word	0x50000300
 80014f4:	50000100 	.word	0x50000100
 80014f8:	2300      	movs	r3, #0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d150      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014fe:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001500:	2b00      	cmp	r3, #0
 8001502:	d010      	beq.n	8001526 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b01      	cmp	r3, #1
 800150e:	d107      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x4b8>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x4b8>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <HAL_ADC_ConfigChannel+0x4ba>
 8001520:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001522:	2b00      	cmp	r3, #0
 8001524:	d13c      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b10      	cmp	r3, #16
 800152c:	d11d      	bne.n	800156a <HAL_ADC_ConfigChannel+0x502>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001536:	d118      	bne.n	800156a <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001542:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001544:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <HAL_ADC_ConfigChannel+0x57c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a27      	ldr	r2, [pc, #156]	; (80015e8 <HAL_ADC_ConfigChannel+0x580>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0c9a      	lsrs	r2, r3, #18
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800155a:	e002      	b.n	8001562 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	3b01      	subs	r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f9      	bne.n	800155c <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001568:	e02e      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b11      	cmp	r3, #17
 8001570:	d10b      	bne.n	800158a <HAL_ADC_ConfigChannel+0x522>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800157a:	d106      	bne.n	800158a <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800157c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001586:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001588:	e01e      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b12      	cmp	r3, #18
 8001590:	d11a      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800159a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800159c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800159e:	e013      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f043 0220 	orr.w	r2, r3, #32
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80015b2:	e00a      	b.n	80015ca <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	f043 0220 	orr.w	r2, r3, #32
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80015c6:	e000      	b.n	80015ca <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015c8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80015d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	376c      	adds	r7, #108	; 0x6c
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000000 	.word	0x20000000
 80015e8:	431bde83 	.word	0x431bde83

080015ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b099      	sub	sp, #100	; 0x64
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001604:	d102      	bne.n	800160c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001606:	4b5a      	ldr	r3, [pc, #360]	; (8001770 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	e002      	b.n	8001612 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800160c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001610:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0a2      	b.n	8001762 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001626:	2302      	movs	r3, #2
 8001628:	e09b      	b.n	8001762 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d17f      	bne.n	8001740 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d179      	bne.n	8001740 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800164c:	4b49      	ldr	r3, [pc, #292]	; (8001774 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800164e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d040      	beq.n	80016da <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001658:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	6859      	ldr	r1, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800166a:	035b      	lsls	r3, r3, #13
 800166c:	430b      	orrs	r3, r1
 800166e:	431a      	orrs	r2, r3
 8001670:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001672:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b01      	cmp	r3, #1
 8001680:	d108      	bne.n	8001694 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001694:	2300      	movs	r3, #0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d15c      	bne.n	8001754 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d107      	bne.n	80016b6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80016b6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d14b      	bne.n	8001754 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80016bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80016c4:	f023 030f 	bic.w	r3, r3, #15
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	6811      	ldr	r1, [r2, #0]
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	6892      	ldr	r2, [r2, #8]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	431a      	orrs	r2, r3
 80016d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016d6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016d8:	e03c      	b.n	8001754 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80016da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016e4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d108      	bne.n	8001706 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d101      	bne.n	8001706 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001706:	2300      	movs	r3, #0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d123      	bne.n	8001754 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b01      	cmp	r3, #1
 8001716:	d107      	bne.n	8001728 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001728:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800172a:	2b00      	cmp	r3, #0
 800172c:	d112      	bne.n	8001754 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800172e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001736:	f023 030f 	bic.w	r3, r3, #15
 800173a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800173c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800173e:	e009      	b.n	8001754 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f043 0220 	orr.w	r2, r3, #32
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001752:	e000      	b.n	8001756 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001754:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800175e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001762:	4618      	mov	r0, r3
 8001764:	3764      	adds	r7, #100	; 0x64
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	50000100 	.word	0x50000100
 8001774:	50000300 	.word	0x50000300

08001778 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800178e:	2b00      	cmp	r3, #0
 8001790:	d126      	bne.n	80017e0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d115      	bne.n	80017d8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d111      	bne.n	80017d8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f043 0201 	orr.w	r2, r3, #1
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f7ff f951 	bl	8000a80 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80017de:	e004      	b.n	80017ea <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	4798      	blx	r3
}
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f7ff f947 	bl	8000a94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b084      	sub	sp, #16
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182c:	f043 0204 	orr.w	r2, r3, #4
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f7ff f937 	bl	8000aa8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	2b01      	cmp	r3, #1
 800185c:	d108      	bne.n	8001870 <ADC_Enable+0x2c>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <ADC_Enable+0x2c>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <ADC_Enable+0x2e>
 8001870:	2300      	movs	r3, #0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d13c      	bne.n	80018f0 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <ADC_Enable+0xb8>)
 800187e:	4013      	ands	r3, r2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00d      	beq.n	80018a0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	f043 0210 	orr.w	r2, r3, #16
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e028      	b.n	80018f2 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80018b0:	f7ff f8b8 	bl	8000a24 <HAL_GetTick>
 80018b4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018b6:	e014      	b.n	80018e2 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018b8:	f7ff f8b4 	bl	8000a24 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d90d      	bls.n	80018e2 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f043 0210 	orr.w	r2, r3, #16
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f043 0201 	orr.w	r2, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e007      	b.n	80018f2 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d1e3      	bne.n	80018b8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	8000003f 	.word	0x8000003f

08001900 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b01      	cmp	r3, #1
 8001918:	d108      	bne.n	800192c <ADC_Disable+0x2c>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <ADC_Disable+0x2c>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <ADC_Disable+0x2e>
 800192c:	2300      	movs	r3, #0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d040      	beq.n	80019b4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 030d 	and.w	r3, r3, #13
 800193c:	2b01      	cmp	r3, #1
 800193e:	d10f      	bne.n	8001960 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0202 	orr.w	r2, r2, #2
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2203      	movs	r2, #3
 8001956:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001958:	f7ff f864 	bl	8000a24 <HAL_GetTick>
 800195c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800195e:	e022      	b.n	80019a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f043 0210 	orr.w	r2, r3, #16
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001970:	f043 0201 	orr.w	r2, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e01c      	b.n	80019b6 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800197c:	f7ff f852 	bl	8000a24 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d90d      	bls.n	80019a6 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f043 0210 	orr.w	r2, r3, #16
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f043 0201 	orr.w	r2, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e007      	b.n	80019b6 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d0e3      	beq.n	800197c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4907      	ldr	r1, [pc, #28]	; (8001a5c <__NVIC_EnableIRQ+0x38>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	; (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	; (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b2c:	d301      	bcc.n	8001b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00f      	b.n	8001b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <SysTick_Config+0x40>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b40:	f7ff ff8e 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <SysTick_Config+0x40>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4a:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <SysTick_Config+0x40>)
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	e000e010 	.word	0xe000e010

08001b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff29 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b88:	f7ff ff3e 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	6978      	ldr	r0, [r7, #20]
 8001b94:	f7ff ff8e 	bl	8001ab4 <NVIC_EncodePriority>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff5d 	bl	8001a60 <__NVIC_SetPriority>
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff31 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ffa2 	bl	8001b1c <SysTick_Config>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e037      	b.n	8001c68 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f940 	bl	8001ed0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}  
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_DMA_Start_IT+0x20>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e04a      	b.n	8001d26 <HAL_DMA_Start_IT+0xb6>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d13a      	bne.n	8001d18 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 f8d4 	bl	8001e74 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 020e 	orr.w	r2, r2, #14
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	e00f      	b.n	8001d06 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f042 020a 	orr.w	r2, r2, #10
 8001cf4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0204 	bic.w	r2, r2, #4
 8001d04:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	e005      	b.n	8001d24 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001d20:	2302      	movs	r3, #2
 8001d22:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001d24:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d024      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x72>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01f      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d107      	bne.n	8001d7e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0204 	bic.w	r2, r2, #4
 8001d7c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d86:	2104      	movs	r1, #4
 8001d88:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d06a      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d9e:	e065      	b.n	8001e6c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	2202      	movs	r2, #2
 8001da6:	409a      	lsls	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d02c      	beq.n	8001e0a <HAL_DMA_IRQHandler+0xdc>
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d027      	beq.n	8001e0a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0320 	and.w	r3, r3, #32
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10b      	bne.n	8001de0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 020a 	bic.w	r2, r2, #10
 8001dd6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de8:	2102      	movs	r1, #2
 8001dea:	fa01 f202 	lsl.w	r2, r1, r2
 8001dee:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d035      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001e08:	e030      	b.n	8001e6c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	2208      	movs	r2, #8
 8001e10:	409a      	lsls	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d028      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x13e>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d023      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 020e 	bic.w	r2, r2, #14
 8001e32:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e42:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	4798      	blx	r3
    }
  }
}  
 8001e6a:	e7ff      	b.n	8001e6c <HAL_DMA_IRQHandler+0x13e>
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e90:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b10      	cmp	r3, #16
 8001ea0:	d108      	bne.n	8001eb4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001eb2:	e007      	b.n	8001ec4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	60da      	str	r2, [r3, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <DMA_CalcBaseAndBitshift+0x34>)
 8001ee0:	4413      	add	r3, r2
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <DMA_CalcBaseAndBitshift+0x38>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	009a      	lsls	r2, r3, #2
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a06      	ldr	r2, [pc, #24]	; (8001f0c <DMA_CalcBaseAndBitshift+0x3c>)
 8001ef4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	bffdfff8 	.word	0xbffdfff8
 8001f08:	cccccccd 	.word	0xcccccccd
 8001f0c:	40020000 	.word	0x40020000

08001f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1e:	e14e      	b.n	80021be <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2101      	movs	r1, #1
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 8140 	beq.w	80021b8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d00b      	beq.n	8001f58 <HAL_GPIO_Init+0x48>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d007      	beq.n	8001f58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f4c:	2b11      	cmp	r3, #17
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b12      	cmp	r3, #18
 8001f56:	d130      	bne.n	8001fba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	2203      	movs	r2, #3
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f8e:	2201      	movs	r2, #1
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	091b      	lsrs	r3, r3, #4
 8001fa4:	f003 0201 	and.w	r2, r3, #1
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0xea>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b12      	cmp	r3, #18
 8001ff8:	d123      	bne.n	8002042 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	08da      	lsrs	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3208      	adds	r2, #8
 8002002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	220f      	movs	r2, #15
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	691a      	ldr	r2, [r3, #16]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	08da      	lsrs	r2, r3, #3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3208      	adds	r2, #8
 800203c:	6939      	ldr	r1, [r7, #16]
 800203e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	2203      	movs	r2, #3
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0203 	and.w	r2, r3, #3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 809a 	beq.w	80021b8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002084:	4b55      	ldr	r3, [pc, #340]	; (80021dc <HAL_GPIO_Init+0x2cc>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a54      	ldr	r2, [pc, #336]	; (80021dc <HAL_GPIO_Init+0x2cc>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b52      	ldr	r3, [pc, #328]	; (80021dc <HAL_GPIO_Init+0x2cc>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800209c:	4a50      	ldr	r2, [pc, #320]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	3302      	adds	r3, #2
 80020a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	220f      	movs	r2, #15
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020c6:	d013      	beq.n	80020f0 <HAL_GPIO_Init+0x1e0>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a46      	ldr	r2, [pc, #280]	; (80021e4 <HAL_GPIO_Init+0x2d4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00d      	beq.n	80020ec <HAL_GPIO_Init+0x1dc>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a45      	ldr	r2, [pc, #276]	; (80021e8 <HAL_GPIO_Init+0x2d8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d007      	beq.n	80020e8 <HAL_GPIO_Init+0x1d8>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a44      	ldr	r2, [pc, #272]	; (80021ec <HAL_GPIO_Init+0x2dc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_GPIO_Init+0x1d4>
 80020e0:	2303      	movs	r3, #3
 80020e2:	e006      	b.n	80020f2 <HAL_GPIO_Init+0x1e2>
 80020e4:	2305      	movs	r3, #5
 80020e6:	e004      	b.n	80020f2 <HAL_GPIO_Init+0x1e2>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e002      	b.n	80020f2 <HAL_GPIO_Init+0x1e2>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_GPIO_Init+0x1e2>
 80020f0:	2300      	movs	r3, #0
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	f002 0203 	and.w	r2, r2, #3
 80020f8:	0092      	lsls	r2, r2, #2
 80020fa:	4093      	lsls	r3, r2
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002102:	4937      	ldr	r1, [pc, #220]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002110:	4b37      	ldr	r3, [pc, #220]	; (80021f0 <HAL_GPIO_Init+0x2e0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002134:	4a2e      	ldr	r2, [pc, #184]	; (80021f0 <HAL_GPIO_Init+0x2e0>)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800213a:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <HAL_GPIO_Init+0x2e0>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800215e:	4a24      	ldr	r2, [pc, #144]	; (80021f0 <HAL_GPIO_Init+0x2e0>)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002164:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <HAL_GPIO_Init+0x2e0>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	43db      	mvns	r3, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002188:	4a19      	ldr	r2, [pc, #100]	; (80021f0 <HAL_GPIO_Init+0x2e0>)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800218e:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <HAL_GPIO_Init+0x2e0>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43db      	mvns	r3, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4013      	ands	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021b2:	4a0f      	ldr	r2, [pc, #60]	; (80021f0 <HAL_GPIO_Init+0x2e0>)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3301      	adds	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f47f aea9 	bne.w	8001f20 <HAL_GPIO_Init+0x10>
  }
}
 80021ce:	bf00      	nop
 80021d0:	371c      	adds	r7, #28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40010000 	.word	0x40010000
 80021e4:	48000400 	.word	0x48000400
 80021e8:	48000800 	.word	0x48000800
 80021ec:	48000c00 	.word	0x48000c00
 80021f0:	40010400 	.word	0x40010400

080021f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	f000 bef4 	b.w	8002ff6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 816a 	beq.w	80024f2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800221e:	4bb3      	ldr	r3, [pc, #716]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b04      	cmp	r3, #4
 8002228:	d00c      	beq.n	8002244 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800222a:	4bb0      	ldr	r3, [pc, #704]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b08      	cmp	r3, #8
 8002234:	d159      	bne.n	80022ea <HAL_RCC_OscConfig+0xf6>
 8002236:	4bad      	ldr	r3, [pc, #692]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002242:	d152      	bne.n	80022ea <HAL_RCC_OscConfig+0xf6>
 8002244:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002248:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002258:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	fab3 f383 	clz	r3, r3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b01      	cmp	r3, #1
 800226e:	d102      	bne.n	8002276 <HAL_RCC_OscConfig+0x82>
 8002270:	4b9e      	ldr	r3, [pc, #632]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	e015      	b.n	80022a2 <HAL_RCC_OscConfig+0xae>
 8002276:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800227a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800228a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800228e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002292:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800229e:	4b93      	ldr	r3, [pc, #588]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022a6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80022aa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80022ae:	fa92 f2a2 	rbit	r2, r2
 80022b2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80022b6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80022ba:	fab2 f282 	clz	r2, r2
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	f042 0220 	orr.w	r2, r2, #32
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	f002 021f 	and.w	r2, r2, #31
 80022ca:	2101      	movs	r1, #1
 80022cc:	fa01 f202 	lsl.w	r2, r1, r2
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 810c 	beq.w	80024f0 <HAL_RCC_OscConfig+0x2fc>
 80022d8:	1d3b      	adds	r3, r7, #4
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 8106 	bne.w	80024f0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f000 be86 	b.w	8002ff6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f4:	d106      	bne.n	8002304 <HAL_RCC_OscConfig+0x110>
 80022f6:	4b7d      	ldr	r3, [pc, #500]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a7c      	ldr	r2, [pc, #496]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e030      	b.n	8002366 <HAL_RCC_OscConfig+0x172>
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0x134>
 800230e:	4b77      	ldr	r3, [pc, #476]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a76      	ldr	r2, [pc, #472]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 8002314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b74      	ldr	r3, [pc, #464]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a73      	ldr	r2, [pc, #460]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 8002320:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e01e      	b.n	8002366 <HAL_RCC_OscConfig+0x172>
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002332:	d10c      	bne.n	800234e <HAL_RCC_OscConfig+0x15a>
 8002334:	4b6d      	ldr	r3, [pc, #436]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a6c      	ldr	r2, [pc, #432]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 800233a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b6a      	ldr	r3, [pc, #424]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a69      	ldr	r2, [pc, #420]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 8002346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	e00b      	b.n	8002366 <HAL_RCC_OscConfig+0x172>
 800234e:	4b67      	ldr	r3, [pc, #412]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a66      	ldr	r2, [pc, #408]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 8002354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	4b64      	ldr	r3, [pc, #400]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a63      	ldr	r2, [pc, #396]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 8002360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002364:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002366:	4b61      	ldr	r3, [pc, #388]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	f023 020f 	bic.w	r2, r3, #15
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	495d      	ldr	r1, [pc, #372]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 8002376:	4313      	orrs	r3, r2
 8002378:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d059      	beq.n	8002438 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7fe fb4e 	bl	8000a24 <HAL_GetTick>
 8002388:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238c:	e00a      	b.n	80023a4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800238e:	f7fe fb49 	bl	8000a24 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	d902      	bls.n	80023a4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	f000 be29 	b.w	8002ff6 <HAL_RCC_OscConfig+0xe02>
 80023a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023a8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80023b8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d102      	bne.n	80023d6 <HAL_RCC_OscConfig+0x1e2>
 80023d0:	4b46      	ldr	r3, [pc, #280]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	e015      	b.n	8002402 <HAL_RCC_OscConfig+0x20e>
 80023d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023da:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80023ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ee:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80023f2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80023fe:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002406:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800240a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800240e:	fa92 f2a2 	rbit	r2, r2
 8002412:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002416:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800241a:	fab2 f282 	clz	r2, r2
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	f042 0220 	orr.w	r2, r2, #32
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	f002 021f 	and.w	r2, r2, #31
 800242a:	2101      	movs	r1, #1
 800242c:	fa01 f202 	lsl.w	r2, r1, r2
 8002430:	4013      	ands	r3, r2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0ab      	beq.n	800238e <HAL_RCC_OscConfig+0x19a>
 8002436:	e05c      	b.n	80024f2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7fe faf4 	bl	8000a24 <HAL_GetTick>
 800243c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002440:	e00a      	b.n	8002458 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002442:	f7fe faef 	bl	8000a24 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	; 0x64
 8002450:	d902      	bls.n	8002458 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	f000 bdcf 	b.w	8002ff6 <HAL_RCC_OscConfig+0xe02>
 8002458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800245c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800246c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d102      	bne.n	800248a <HAL_RCC_OscConfig+0x296>
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	e015      	b.n	80024b6 <HAL_RCC_OscConfig+0x2c2>
 800248a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800248e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800249e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80024a6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <HAL_RCC_OscConfig+0x2f8>)
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024ba:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80024be:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80024c2:	fa92 f2a2 	rbit	r2, r2
 80024c6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80024ca:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80024ce:	fab2 f282 	clz	r2, r2
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	f042 0220 	orr.w	r2, r2, #32
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	f002 021f 	and.w	r2, r2, #31
 80024de:	2101      	movs	r1, #1
 80024e0:	fa01 f202 	lsl.w	r2, r1, r2
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1ab      	bne.n	8002442 <HAL_RCC_OscConfig+0x24e>
 80024ea:	e002      	b.n	80024f2 <HAL_RCC_OscConfig+0x2fe>
 80024ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 816f 	beq.w	80027e0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002502:	4bd0      	ldr	r3, [pc, #832]	; (8002844 <HAL_RCC_OscConfig+0x650>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800250e:	4bcd      	ldr	r3, [pc, #820]	; (8002844 <HAL_RCC_OscConfig+0x650>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b08      	cmp	r3, #8
 8002518:	d16c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x400>
 800251a:	4bca      	ldr	r3, [pc, #808]	; (8002844 <HAL_RCC_OscConfig+0x650>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d166      	bne.n	80025f4 <HAL_RCC_OscConfig+0x400>
 8002526:	2302      	movs	r3, #2
 8002528:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002538:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	b2db      	uxtb	r3, r3
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b01      	cmp	r3, #1
 800254e:	d102      	bne.n	8002556 <HAL_RCC_OscConfig+0x362>
 8002550:	4bbc      	ldr	r3, [pc, #752]	; (8002844 <HAL_RCC_OscConfig+0x650>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	e013      	b.n	800257e <HAL_RCC_OscConfig+0x38a>
 8002556:	2302      	movs	r3, #2
 8002558:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002568:	2302      	movs	r3, #2
 800256a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800256e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800257a:	4bb2      	ldr	r3, [pc, #712]	; (8002844 <HAL_RCC_OscConfig+0x650>)
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	2202      	movs	r2, #2
 8002580:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002584:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002588:	fa92 f2a2 	rbit	r2, r2
 800258c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002590:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002594:	fab2 f282 	clz	r2, r2
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	f042 0220 	orr.w	r2, r2, #32
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	f002 021f 	and.w	r2, r2, #31
 80025a4:	2101      	movs	r1, #1
 80025a6:	fa01 f202 	lsl.w	r2, r1, r2
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <HAL_RCC_OscConfig+0x3cc>
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d002      	beq.n	80025c0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	f000 bd1b 	b.w	8002ff6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4ba0      	ldr	r3, [pc, #640]	; (8002844 <HAL_RCC_OscConfig+0x650>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	21f8      	movs	r1, #248	; 0xf8
 80025d0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80025d8:	fa91 f1a1 	rbit	r1, r1
 80025dc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80025e0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80025e4:	fab1 f181 	clz	r1, r1
 80025e8:	b2c9      	uxtb	r1, r1
 80025ea:	408b      	lsls	r3, r1
 80025ec:	4995      	ldr	r1, [pc, #596]	; (8002844 <HAL_RCC_OscConfig+0x650>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f2:	e0f5      	b.n	80027e0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 8085 	beq.w	800270a <HAL_RCC_OscConfig+0x516>
 8002600:	2301      	movs	r3, #1
 8002602:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002612:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002620:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	461a      	mov	r2, r3
 8002628:	2301      	movs	r3, #1
 800262a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7fe f9fa 	bl	8000a24 <HAL_GetTick>
 8002630:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002636:	f7fe f9f5 	bl	8000a24 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d902      	bls.n	800264c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	f000 bcd5 	b.w	8002ff6 <HAL_RCC_OscConfig+0xe02>
 800264c:	2302      	movs	r3, #2
 800264e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800265e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d102      	bne.n	800267c <HAL_RCC_OscConfig+0x488>
 8002676:	4b73      	ldr	r3, [pc, #460]	; (8002844 <HAL_RCC_OscConfig+0x650>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	e013      	b.n	80026a4 <HAL_RCC_OscConfig+0x4b0>
 800267c:	2302      	movs	r3, #2
 800267e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800268e:	2302      	movs	r3, #2
 8002690:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002694:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80026a0:	4b68      	ldr	r3, [pc, #416]	; (8002844 <HAL_RCC_OscConfig+0x650>)
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	2202      	movs	r2, #2
 80026a6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80026aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80026ae:	fa92 f2a2 	rbit	r2, r2
 80026b2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80026b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80026ba:	fab2 f282 	clz	r2, r2
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	f042 0220 	orr.w	r2, r2, #32
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	f002 021f 	and.w	r2, r2, #31
 80026ca:	2101      	movs	r1, #1
 80026cc:	fa01 f202 	lsl.w	r2, r1, r2
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0af      	beq.n	8002636 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d6:	4b5b      	ldr	r3, [pc, #364]	; (8002844 <HAL_RCC_OscConfig+0x650>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	21f8      	movs	r1, #248	; 0xf8
 80026e6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80026ee:	fa91 f1a1 	rbit	r1, r1
 80026f2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80026f6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80026fa:	fab1 f181 	clz	r1, r1
 80026fe:	b2c9      	uxtb	r1, r1
 8002700:	408b      	lsls	r3, r1
 8002702:	4950      	ldr	r1, [pc, #320]	; (8002844 <HAL_RCC_OscConfig+0x650>)
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]
 8002708:	e06a      	b.n	80027e0 <HAL_RCC_OscConfig+0x5ec>
 800270a:	2301      	movs	r3, #1
 800270c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800271c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002720:	fab3 f383 	clz	r3, r3
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800272a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	461a      	mov	r2, r3
 8002732:	2300      	movs	r3, #0
 8002734:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7fe f975 	bl	8000a24 <HAL_GetTick>
 800273a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273e:	e00a      	b.n	8002756 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002740:	f7fe f970 	bl	8000a24 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d902      	bls.n	8002756 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	f000 bc50 	b.w	8002ff6 <HAL_RCC_OscConfig+0xe02>
 8002756:	2302      	movs	r3, #2
 8002758:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d102      	bne.n	8002786 <HAL_RCC_OscConfig+0x592>
 8002780:	4b30      	ldr	r3, [pc, #192]	; (8002844 <HAL_RCC_OscConfig+0x650>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	e013      	b.n	80027ae <HAL_RCC_OscConfig+0x5ba>
 8002786:	2302      	movs	r3, #2
 8002788:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002798:	2302      	movs	r3, #2
 800279a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800279e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80027aa:	4b26      	ldr	r3, [pc, #152]	; (8002844 <HAL_RCC_OscConfig+0x650>)
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	2202      	movs	r2, #2
 80027b0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80027b4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80027b8:	fa92 f2a2 	rbit	r2, r2
 80027bc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80027c0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80027c4:	fab2 f282 	clz	r2, r2
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	f042 0220 	orr.w	r2, r2, #32
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	f002 021f 	and.w	r2, r2, #31
 80027d4:	2101      	movs	r1, #1
 80027d6:	fa01 f202 	lsl.w	r2, r1, r2
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1af      	bne.n	8002740 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 80da 	beq.w	80029a4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f0:	1d3b      	adds	r3, r7, #4
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d069      	beq.n	80028ce <HAL_RCC_OscConfig+0x6da>
 80027fa:	2301      	movs	r3, #1
 80027fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800280c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCC_OscConfig+0x654>)
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	461a      	mov	r2, r3
 8002820:	2301      	movs	r3, #1
 8002822:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002824:	f7fe f8fe 	bl	8000a24 <HAL_GetTick>
 8002828:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282c:	e00e      	b.n	800284c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282e:	f7fe f8f9 	bl	8000a24 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d906      	bls.n	800284c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e3d9      	b.n	8002ff6 <HAL_RCC_OscConfig+0xe02>
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000
 8002848:	10908120 	.word	0x10908120
 800284c:	2302      	movs	r3, #2
 800284e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800285e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002862:	2202      	movs	r2, #2
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	fa93 f2a3 	rbit	r2, r3
 8002870:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800287a:	2202      	movs	r2, #2
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	fa93 f2a3 	rbit	r2, r3
 8002888:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800288c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288e:	4ba5      	ldr	r3, [pc, #660]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 8002890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002892:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002896:	2102      	movs	r1, #2
 8002898:	6019      	str	r1, [r3, #0]
 800289a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	fa93 f1a3 	rbit	r1, r3
 80028a4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028a8:	6019      	str	r1, [r3, #0]
  return result;
 80028aa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	2101      	movs	r1, #1
 80028c2:	fa01 f303 	lsl.w	r3, r1, r3
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0b0      	beq.n	800282e <HAL_RCC_OscConfig+0x63a>
 80028cc:	e06a      	b.n	80029a4 <HAL_RCC_OscConfig+0x7b0>
 80028ce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	fa93 f2a3 	rbit	r2, r3
 80028e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028e4:	601a      	str	r2, [r3, #0]
  return result;
 80028e6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028ea:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ec:	fab3 f383 	clz	r3, r3
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	4b8c      	ldr	r3, [pc, #560]	; (8002b28 <HAL_RCC_OscConfig+0x934>)
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	461a      	mov	r2, r3
 80028fc:	2300      	movs	r3, #0
 80028fe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002900:	f7fe f890 	bl	8000a24 <HAL_GetTick>
 8002904:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002908:	e009      	b.n	800291e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290a:	f7fe f88b 	bl	8000a24 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e36b      	b.n	8002ff6 <HAL_RCC_OscConfig+0xe02>
 800291e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002922:	2202      	movs	r2, #2
 8002924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	fa93 f2a3 	rbit	r2, r3
 8002930:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800293a:	2202      	movs	r2, #2
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	fa93 f2a3 	rbit	r2, r3
 8002948:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002952:	2202      	movs	r2, #2
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	fa93 f2a3 	rbit	r2, r3
 8002960:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002964:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002966:	4b6f      	ldr	r3, [pc, #444]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 8002968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800296a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800296e:	2102      	movs	r1, #2
 8002970:	6019      	str	r1, [r3, #0]
 8002972:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	fa93 f1a3 	rbit	r1, r3
 800297c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002980:	6019      	str	r1, [r3, #0]
  return result;
 8002982:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2101      	movs	r1, #1
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1b2      	bne.n	800290a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8158 	beq.w	8002c64 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ba:	4b5a      	ldr	r3, [pc, #360]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d112      	bne.n	80029ec <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c6:	4b57      	ldr	r3, [pc, #348]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	4a56      	ldr	r2, [pc, #344]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 80029cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d0:	61d3      	str	r3, [r2, #28]
 80029d2:	4b54      	ldr	r3, [pc, #336]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80029da:	f107 0308 	add.w	r3, r7, #8
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	f107 0308 	add.w	r3, r7, #8
 80029e4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ec:	4b4f      	ldr	r3, [pc, #316]	; (8002b2c <HAL_RCC_OscConfig+0x938>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d11a      	bne.n	8002a2e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029f8:	4b4c      	ldr	r3, [pc, #304]	; (8002b2c <HAL_RCC_OscConfig+0x938>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a4b      	ldr	r2, [pc, #300]	; (8002b2c <HAL_RCC_OscConfig+0x938>)
 80029fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a02:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a04:	f7fe f80e 	bl	8000a24 <HAL_GetTick>
 8002a08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0c:	e009      	b.n	8002a22 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a0e:	f7fe f809 	bl	8000a24 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	; 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e2e9      	b.n	8002ff6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a22:	4b42      	ldr	r3, [pc, #264]	; (8002b2c <HAL_RCC_OscConfig+0x938>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0ef      	beq.n	8002a0e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a2e:	1d3b      	adds	r3, r7, #4
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d106      	bne.n	8002a46 <HAL_RCC_OscConfig+0x852>
 8002a38:	4b3a      	ldr	r3, [pc, #232]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	4a39      	ldr	r2, [pc, #228]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6213      	str	r3, [r2, #32]
 8002a44:	e02f      	b.n	8002aa6 <HAL_RCC_OscConfig+0x8b2>
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10c      	bne.n	8002a6a <HAL_RCC_OscConfig+0x876>
 8002a50:	4b34      	ldr	r3, [pc, #208]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	4a33      	ldr	r2, [pc, #204]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	6213      	str	r3, [r2, #32]
 8002a5c:	4b31      	ldr	r3, [pc, #196]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	4a30      	ldr	r2, [pc, #192]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 8002a62:	f023 0304 	bic.w	r3, r3, #4
 8002a66:	6213      	str	r3, [r2, #32]
 8002a68:	e01d      	b.n	8002aa6 <HAL_RCC_OscConfig+0x8b2>
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b05      	cmp	r3, #5
 8002a72:	d10c      	bne.n	8002a8e <HAL_RCC_OscConfig+0x89a>
 8002a74:	4b2b      	ldr	r3, [pc, #172]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	4a2a      	ldr	r2, [pc, #168]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 8002a7a:	f043 0304 	orr.w	r3, r3, #4
 8002a7e:	6213      	str	r3, [r2, #32]
 8002a80:	4b28      	ldr	r3, [pc, #160]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	4a27      	ldr	r2, [pc, #156]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6213      	str	r3, [r2, #32]
 8002a8c:	e00b      	b.n	8002aa6 <HAL_RCC_OscConfig+0x8b2>
 8002a8e:	4b25      	ldr	r3, [pc, #148]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	4a24      	ldr	r2, [pc, #144]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 8002a94:	f023 0301 	bic.w	r3, r3, #1
 8002a98:	6213      	str	r3, [r2, #32]
 8002a9a:	4b22      	ldr	r3, [pc, #136]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	4a21      	ldr	r2, [pc, #132]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 8002aa0:	f023 0304 	bic.w	r3, r3, #4
 8002aa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d06b      	beq.n	8002b88 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab0:	f7fd ffb8 	bl	8000a24 <HAL_GetTick>
 8002ab4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab8:	e00b      	b.n	8002ad2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aba:	f7fd ffb3 	bl	8000a24 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e291      	b.n	8002ff6 <HAL_RCC_OscConfig+0xe02>
 8002ad2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	fa93 f2a3 	rbit	r2, r3
 8002ae4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002aee:	2202      	movs	r2, #2
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	fa93 f2a3 	rbit	r2, r3
 8002afc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b00:	601a      	str	r2, [r3, #0]
  return result;
 8002b02:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b06:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b08:	fab3 f383 	clz	r3, r3
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	f043 0302 	orr.w	r3, r3, #2
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d109      	bne.n	8002b30 <HAL_RCC_OscConfig+0x93c>
 8002b1c:	4b01      	ldr	r3, [pc, #4]	; (8002b24 <HAL_RCC_OscConfig+0x930>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	e014      	b.n	8002b4c <HAL_RCC_OscConfig+0x958>
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
 8002b28:	10908120 	.word	0x10908120
 8002b2c:	40007000 	.word	0x40007000
 8002b30:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b34:	2202      	movs	r2, #2
 8002b36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	fa93 f2a3 	rbit	r2, r3
 8002b42:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	4bbb      	ldr	r3, [pc, #748]	; (8002e38 <HAL_RCC_OscConfig+0xc44>)
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002b50:	2102      	movs	r1, #2
 8002b52:	6011      	str	r1, [r2, #0]
 8002b54:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	fa92 f1a2 	rbit	r1, r2
 8002b5e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002b62:	6011      	str	r1, [r2, #0]
  return result;
 8002b64:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	fab2 f282 	clz	r2, r2
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	f002 021f 	and.w	r2, r2, #31
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d099      	beq.n	8002aba <HAL_RCC_OscConfig+0x8c6>
 8002b86:	e063      	b.n	8002c50 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b88:	f7fd ff4c 	bl	8000a24 <HAL_GetTick>
 8002b8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b90:	e00b      	b.n	8002baa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b92:	f7fd ff47 	bl	8000a24 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e225      	b.n	8002ff6 <HAL_RCC_OscConfig+0xe02>
 8002baa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002bae:	2202      	movs	r2, #2
 8002bb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	fa93 f2a3 	rbit	r2, r3
 8002bbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	fa93 f2a3 	rbit	r2, r3
 8002bd4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002bd8:	601a      	str	r2, [r3, #0]
  return result;
 8002bda:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002bde:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f043 0302 	orr.w	r3, r3, #2
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d102      	bne.n	8002bfa <HAL_RCC_OscConfig+0xa06>
 8002bf4:	4b90      	ldr	r3, [pc, #576]	; (8002e38 <HAL_RCC_OscConfig+0xc44>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	e00d      	b.n	8002c16 <HAL_RCC_OscConfig+0xa22>
 8002bfa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002bfe:	2202      	movs	r2, #2
 8002c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	fa93 f2a3 	rbit	r2, r3
 8002c0c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	4b89      	ldr	r3, [pc, #548]	; (8002e38 <HAL_RCC_OscConfig+0xc44>)
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c1a:	2102      	movs	r1, #2
 8002c1c:	6011      	str	r1, [r2, #0]
 8002c1e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	fa92 f1a2 	rbit	r1, r2
 8002c28:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c2c:	6011      	str	r1, [r2, #0]
  return result;
 8002c2e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	fab2 f282 	clz	r2, r2
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	f002 021f 	and.w	r2, r2, #31
 8002c44:	2101      	movs	r1, #1
 8002c46:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1a0      	bne.n	8002b92 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c50:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d105      	bne.n	8002c64 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c58:	4b77      	ldr	r3, [pc, #476]	; (8002e38 <HAL_RCC_OscConfig+0xc44>)
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	4a76      	ldr	r2, [pc, #472]	; (8002e38 <HAL_RCC_OscConfig+0xc44>)
 8002c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c62:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c64:	1d3b      	adds	r3, r7, #4
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 81c2 	beq.w	8002ff4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c70:	4b71      	ldr	r3, [pc, #452]	; (8002e38 <HAL_RCC_OscConfig+0xc44>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	f000 819c 	beq.w	8002fb6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c7e:	1d3b      	adds	r3, r7, #4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	f040 8114 	bne.w	8002eb2 <HAL_RCC_OscConfig+0xcbe>
 8002c8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002c8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	fa93 f2a3 	rbit	r2, r3
 8002c9e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ca2:	601a      	str	r2, [r3, #0]
  return result;
 8002ca4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ca8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	461a      	mov	r2, r3
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fd feb0 	bl	8000a24 <HAL_GetTick>
 8002cc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc8:	e009      	b.n	8002cde <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cca:	f7fd feab 	bl	8000a24 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e18b      	b.n	8002ff6 <HAL_RCC_OscConfig+0xe02>
 8002cde:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ce2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ce6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	fa93 f2a3 	rbit	r2, r3
 8002cf2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002cf6:	601a      	str	r2, [r3, #0]
  return result;
 8002cf8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002cfc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d102      	bne.n	8002d18 <HAL_RCC_OscConfig+0xb24>
 8002d12:	4b49      	ldr	r3, [pc, #292]	; (8002e38 <HAL_RCC_OscConfig+0xc44>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	e01b      	b.n	8002d50 <HAL_RCC_OscConfig+0xb5c>
 8002d18:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	fa93 f2a3 	rbit	r2, r3
 8002d2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	fa93 f2a3 	rbit	r2, r3
 8002d46:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	4b3a      	ldr	r3, [pc, #232]	; (8002e38 <HAL_RCC_OscConfig+0xc44>)
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d58:	6011      	str	r1, [r2, #0]
 8002d5a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	fa92 f1a2 	rbit	r1, r2
 8002d64:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002d68:	6011      	str	r1, [r2, #0]
  return result;
 8002d6a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	fab2 f282 	clz	r2, r2
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	f042 0220 	orr.w	r2, r2, #32
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	f002 021f 	and.w	r2, r2, #31
 8002d80:	2101      	movs	r1, #1
 8002d82:	fa01 f202 	lsl.w	r2, r1, r2
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d19e      	bne.n	8002cca <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d8c:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <HAL_RCC_OscConfig+0xc44>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d94:	1d3b      	adds	r3, r7, #4
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d9a:	1d3b      	adds	r3, r7, #4
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	430b      	orrs	r3, r1
 8002da2:	4925      	ldr	r1, [pc, #148]	; (8002e38 <HAL_RCC_OscConfig+0xc44>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
 8002da8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002dac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002db0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	fa93 f2a3 	rbit	r2, r3
 8002dbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002dc0:	601a      	str	r2, [r3, #0]
  return result;
 8002dc2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002dc6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dd2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2301      	movs	r3, #1
 8002ddc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dde:	f7fd fe21 	bl	8000a24 <HAL_GetTick>
 8002de2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002de6:	e009      	b.n	8002dfc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fd fe1c 	bl	8000a24 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e0fc      	b.n	8002ff6 <HAL_RCC_OscConfig+0xe02>
 8002dfc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	fa93 f2a3 	rbit	r2, r3
 8002e10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e14:	601a      	str	r2, [r3, #0]
  return result;
 8002e16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e1c:	fab3 f383 	clz	r3, r3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d105      	bne.n	8002e3c <HAL_RCC_OscConfig+0xc48>
 8002e30:	4b01      	ldr	r3, [pc, #4]	; (8002e38 <HAL_RCC_OscConfig+0xc44>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	e01e      	b.n	8002e74 <HAL_RCC_OscConfig+0xc80>
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	fa93 f2a3 	rbit	r2, r3
 8002e50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	fa93 f2a3 	rbit	r2, r3
 8002e6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	4b63      	ldr	r3, [pc, #396]	; (8003000 <HAL_RCC_OscConfig+0xe0c>)
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e7c:	6011      	str	r1, [r2, #0]
 8002e7e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	fa92 f1a2 	rbit	r1, r2
 8002e88:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002e8c:	6011      	str	r1, [r2, #0]
  return result;
 8002e8e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	fab2 f282 	clz	r2, r2
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	f042 0220 	orr.w	r2, r2, #32
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	f002 021f 	and.w	r2, r2, #31
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d09b      	beq.n	8002de8 <HAL_RCC_OscConfig+0xbf4>
 8002eb0:	e0a0      	b.n	8002ff4 <HAL_RCC_OscConfig+0xe00>
 8002eb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002eb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	fa93 f2a3 	rbit	r2, r3
 8002ec6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eca:	601a      	str	r2, [r3, #0]
  return result;
 8002ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ed0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed2:	fab3 f383 	clz	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002edc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fd fd9c 	bl	8000a24 <HAL_GetTick>
 8002eec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef0:	e009      	b.n	8002f06 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef2:	f7fd fd97 	bl	8000a24 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e077      	b.n	8002ff6 <HAL_RCC_OscConfig+0xe02>
 8002f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	fa93 f2a3 	rbit	r2, r3
 8002f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1e:	601a      	str	r2, [r3, #0]
  return result;
 8002f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	095b      	lsrs	r3, r3, #5
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d102      	bne.n	8002f40 <HAL_RCC_OscConfig+0xd4c>
 8002f3a:	4b31      	ldr	r3, [pc, #196]	; (8003000 <HAL_RCC_OscConfig+0xe0c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	e01b      	b.n	8002f78 <HAL_RCC_OscConfig+0xd84>
 8002f40:	f107 0320 	add.w	r3, r7, #32
 8002f44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	f107 0320 	add.w	r3, r7, #32
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	fa93 f2a3 	rbit	r2, r3
 8002f54:	f107 031c 	add.w	r3, r7, #28
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	f107 0318 	add.w	r3, r7, #24
 8002f5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	f107 0318 	add.w	r3, r7, #24
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	fa93 f2a3 	rbit	r2, r3
 8002f6e:	f107 0314 	add.w	r3, r7, #20
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	4b22      	ldr	r3, [pc, #136]	; (8003000 <HAL_RCC_OscConfig+0xe0c>)
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	f107 0210 	add.w	r2, r7, #16
 8002f7c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f80:	6011      	str	r1, [r2, #0]
 8002f82:	f107 0210 	add.w	r2, r7, #16
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	fa92 f1a2 	rbit	r1, r2
 8002f8c:	f107 020c 	add.w	r2, r7, #12
 8002f90:	6011      	str	r1, [r2, #0]
  return result;
 8002f92:	f107 020c 	add.w	r2, r7, #12
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	fab2 f282 	clz	r2, r2
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	f042 0220 	orr.w	r2, r2, #32
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	f002 021f 	and.w	r2, r2, #31
 8002fa8:	2101      	movs	r1, #1
 8002faa:	fa01 f202 	lsl.w	r2, r1, r2
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d19e      	bne.n	8002ef2 <HAL_RCC_OscConfig+0xcfe>
 8002fb4:	e01e      	b.n	8002ff4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb6:	1d3b      	adds	r3, r7, #4
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e018      	b.n	8002ff6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <HAL_RCC_OscConfig+0xe0c>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fcc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002fd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d108      	bne.n	8002ff0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002fde:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002fe2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fe6:	1d3b      	adds	r3, r7, #4
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40021000 	.word	0x40021000

08003004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b09e      	sub	sp, #120	; 0x78
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e162      	b.n	80032e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800301c:	4b90      	ldr	r3, [pc, #576]	; (8003260 <HAL_RCC_ClockConfig+0x25c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d910      	bls.n	800304c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b8d      	ldr	r3, [pc, #564]	; (8003260 <HAL_RCC_ClockConfig+0x25c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 0207 	bic.w	r2, r3, #7
 8003032:	498b      	ldr	r1, [pc, #556]	; (8003260 <HAL_RCC_ClockConfig+0x25c>)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	4313      	orrs	r3, r2
 8003038:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	4b89      	ldr	r3, [pc, #548]	; (8003260 <HAL_RCC_ClockConfig+0x25c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e14a      	b.n	80032e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003058:	4b82      	ldr	r3, [pc, #520]	; (8003264 <HAL_RCC_ClockConfig+0x260>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	497f      	ldr	r1, [pc, #508]	; (8003264 <HAL_RCC_ClockConfig+0x260>)
 8003066:	4313      	orrs	r3, r2
 8003068:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80dc 	beq.w	8003230 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d13c      	bne.n	80030fa <HAL_RCC_ClockConfig+0xf6>
 8003080:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003084:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800308e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003090:	fab3 f383 	clz	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d102      	bne.n	80030aa <HAL_RCC_ClockConfig+0xa6>
 80030a4:	4b6f      	ldr	r3, [pc, #444]	; (8003264 <HAL_RCC_ClockConfig+0x260>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	e00f      	b.n	80030ca <HAL_RCC_ClockConfig+0xc6>
 80030aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	667b      	str	r3, [r7, #100]	; 0x64
 80030b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030bc:	663b      	str	r3, [r7, #96]	; 0x60
 80030be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030c0:	fa93 f3a3 	rbit	r3, r3
 80030c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030c6:	4b67      	ldr	r3, [pc, #412]	; (8003264 <HAL_RCC_ClockConfig+0x260>)
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80030d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030d2:	fa92 f2a2 	rbit	r2, r2
 80030d6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80030d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030da:	fab2 f282 	clz	r2, r2
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	f042 0220 	orr.w	r2, r2, #32
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	f002 021f 	and.w	r2, r2, #31
 80030ea:	2101      	movs	r1, #1
 80030ec:	fa01 f202 	lsl.w	r2, r1, r2
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d17b      	bne.n	80031ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e0f3      	b.n	80032e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d13c      	bne.n	800317c <HAL_RCC_ClockConfig+0x178>
 8003102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003106:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800310a:	fa93 f3a3 	rbit	r3, r3
 800310e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	b2db      	uxtb	r3, r3
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d102      	bne.n	800312c <HAL_RCC_ClockConfig+0x128>
 8003126:	4b4f      	ldr	r3, [pc, #316]	; (8003264 <HAL_RCC_ClockConfig+0x260>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	e00f      	b.n	800314c <HAL_RCC_ClockConfig+0x148>
 800312c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003130:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	647b      	str	r3, [r7, #68]	; 0x44
 800313a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800313e:	643b      	str	r3, [r7, #64]	; 0x40
 8003140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003148:	4b46      	ldr	r3, [pc, #280]	; (8003264 <HAL_RCC_ClockConfig+0x260>)
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003150:	63ba      	str	r2, [r7, #56]	; 0x38
 8003152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003154:	fa92 f2a2 	rbit	r2, r2
 8003158:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800315a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800315c:	fab2 f282 	clz	r2, r2
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	f042 0220 	orr.w	r2, r2, #32
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	f002 021f 	and.w	r2, r2, #31
 800316c:	2101      	movs	r1, #1
 800316e:	fa01 f202 	lsl.w	r2, r1, r2
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d13a      	bne.n	80031ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0b2      	b.n	80032e2 <HAL_RCC_ClockConfig+0x2de>
 800317c:	2302      	movs	r3, #2
 800317e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003182:	fa93 f3a3 	rbit	r3, r3
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	b2db      	uxtb	r3, r3
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d102      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x1a0>
 800319e:	4b31      	ldr	r3, [pc, #196]	; (8003264 <HAL_RCC_ClockConfig+0x260>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	e00d      	b.n	80031c0 <HAL_RCC_ClockConfig+0x1bc>
 80031a4:	2302      	movs	r3, #2
 80031a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
 80031b0:	2302      	movs	r3, #2
 80031b2:	623b      	str	r3, [r7, #32]
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	4b29      	ldr	r3, [pc, #164]	; (8003264 <HAL_RCC_ClockConfig+0x260>)
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	2202      	movs	r2, #2
 80031c2:	61ba      	str	r2, [r7, #24]
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	fa92 f2a2 	rbit	r2, r2
 80031ca:	617a      	str	r2, [r7, #20]
  return result;
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	fab2 f282 	clz	r2, r2
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	f042 0220 	orr.w	r2, r2, #32
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	f002 021f 	and.w	r2, r2, #31
 80031de:	2101      	movs	r1, #1
 80031e0:	fa01 f202 	lsl.w	r2, r1, r2
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e079      	b.n	80032e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ee:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <HAL_RCC_ClockConfig+0x260>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f023 0203 	bic.w	r2, r3, #3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	491a      	ldr	r1, [pc, #104]	; (8003264 <HAL_RCC_ClockConfig+0x260>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003200:	f7fd fc10 	bl	8000a24 <HAL_GetTick>
 8003204:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003206:	e00a      	b.n	800321e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003208:	f7fd fc0c 	bl	8000a24 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f241 3288 	movw	r2, #5000	; 0x1388
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e061      	b.n	80032e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321e:	4b11      	ldr	r3, [pc, #68]	; (8003264 <HAL_RCC_ClockConfig+0x260>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 020c 	and.w	r2, r3, #12
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	429a      	cmp	r2, r3
 800322e:	d1eb      	bne.n	8003208 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_RCC_ClockConfig+0x25c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d214      	bcs.n	8003268 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323e:	4b08      	ldr	r3, [pc, #32]	; (8003260 <HAL_RCC_ClockConfig+0x25c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 0207 	bic.w	r2, r3, #7
 8003246:	4906      	ldr	r1, [pc, #24]	; (8003260 <HAL_RCC_ClockConfig+0x25c>)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	4313      	orrs	r3, r2
 800324c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b04      	ldr	r3, [pc, #16]	; (8003260 <HAL_RCC_ClockConfig+0x25c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d005      	beq.n	8003268 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e040      	b.n	80032e2 <HAL_RCC_ClockConfig+0x2de>
 8003260:	40022000 	.word	0x40022000
 8003264:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003274:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_RCC_ClockConfig+0x2e8>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	491a      	ldr	r1, [pc, #104]	; (80032ec <HAL_RCC_ClockConfig+0x2e8>)
 8003282:	4313      	orrs	r3, r2
 8003284:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d009      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003292:	4b16      	ldr	r3, [pc, #88]	; (80032ec <HAL_RCC_ClockConfig+0x2e8>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4912      	ldr	r1, [pc, #72]	; (80032ec <HAL_RCC_ClockConfig+0x2e8>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032a6:	f000 f829 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 80032aa:	4601      	mov	r1, r0
 80032ac:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <HAL_RCC_ClockConfig+0x2e8>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032b4:	22f0      	movs	r2, #240	; 0xf0
 80032b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	fa92 f2a2 	rbit	r2, r2
 80032be:	60fa      	str	r2, [r7, #12]
  return result;
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	fab2 f282 	clz	r2, r2
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	40d3      	lsrs	r3, r2
 80032ca:	4a09      	ldr	r2, [pc, #36]	; (80032f0 <HAL_RCC_ClockConfig+0x2ec>)
 80032cc:	5cd3      	ldrb	r3, [r2, r3]
 80032ce:	fa21 f303 	lsr.w	r3, r1, r3
 80032d2:	4a08      	ldr	r2, [pc, #32]	; (80032f4 <HAL_RCC_ClockConfig+0x2f0>)
 80032d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <HAL_RCC_ClockConfig+0x2f4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd fb5e 	bl	800099c <HAL_InitTick>
  
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3778      	adds	r7, #120	; 0x78
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000
 80032f0:	0800420c 	.word	0x0800420c
 80032f4:	20000000 	.word	0x20000000
 80032f8:	20000004 	.word	0x20000004

080032fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b08b      	sub	sp, #44	; 0x2c
 8003300:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	2300      	movs	r3, #0
 8003308:	61bb      	str	r3, [r7, #24]
 800330a:	2300      	movs	r3, #0
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003316:	4b29      	ldr	r3, [pc, #164]	; (80033bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	2b04      	cmp	r3, #4
 8003324:	d002      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x30>
 8003326:	2b08      	cmp	r3, #8
 8003328:	d003      	beq.n	8003332 <HAL_RCC_GetSysClockFreq+0x36>
 800332a:	e03c      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800332c:	4b24      	ldr	r3, [pc, #144]	; (80033c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800332e:	623b      	str	r3, [r7, #32]
      break;
 8003330:	e03c      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003338:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800333c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	fa92 f2a2 	rbit	r2, r2
 8003344:	607a      	str	r2, [r7, #4]
  return result;
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	fab2 f282 	clz	r2, r2
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	40d3      	lsrs	r3, r2
 8003350:	4a1c      	ldr	r2, [pc, #112]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003352:	5cd3      	ldrb	r3, [r2, r3]
 8003354:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003356:	4b19      	ldr	r3, [pc, #100]	; (80033bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	220f      	movs	r2, #15
 8003360:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	fa92 f2a2 	rbit	r2, r2
 8003368:	60fa      	str	r2, [r7, #12]
  return result;
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	fab2 f282 	clz	r2, r2
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	40d3      	lsrs	r3, r2
 8003374:	4a14      	ldr	r2, [pc, #80]	; (80033c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003376:	5cd3      	ldrb	r3, [r2, r3]
 8003378:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003384:	4a0e      	ldr	r2, [pc, #56]	; (80033c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	fbb2 f2f3 	udiv	r2, r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	fb02 f303 	mul.w	r3, r2, r3
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
 8003394:	e004      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	4a0c      	ldr	r2, [pc, #48]	; (80033cc <HAL_RCC_GetSysClockFreq+0xd0>)
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	623b      	str	r3, [r7, #32]
      break;
 80033a4:	e002      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033a8:	623b      	str	r3, [r7, #32]
      break;
 80033aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ac:	6a3b      	ldr	r3, [r7, #32]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	372c      	adds	r7, #44	; 0x2c
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
 80033c0:	007a1200 	.word	0x007a1200
 80033c4:	0800421c 	.word	0x0800421c
 80033c8:	0800422c 	.word	0x0800422c
 80033cc:	003d0900 	.word	0x003d0900

080033d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b092      	sub	sp, #72	; 0x48
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80d0 	beq.w	800358e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f4:	4b86      	ldr	r3, [pc, #536]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10e      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003400:	4b83      	ldr	r3, [pc, #524]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	4a82      	ldr	r2, [pc, #520]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340a:	61d3      	str	r3, [r2, #28]
 800340c:	4b80      	ldr	r3, [pc, #512]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003418:	2301      	movs	r3, #1
 800341a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341e:	4b7d      	ldr	r3, [pc, #500]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d118      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800342a:	4b7a      	ldr	r3, [pc, #488]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a79      	ldr	r2, [pc, #484]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003434:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003436:	f7fd faf5 	bl	8000a24 <HAL_GetTick>
 800343a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343c:	e008      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343e:	f7fd faf1 	bl	8000a24 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b64      	cmp	r3, #100	; 0x64
 800344a:	d901      	bls.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e0db      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003450:	4b70      	ldr	r3, [pc, #448]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800345c:	4b6c      	ldr	r3, [pc, #432]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003464:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d07d      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003474:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003476:	429a      	cmp	r2, r3
 8003478:	d076      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800347a:	4b65      	ldr	r3, [pc, #404]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003488:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	fa93 f3a3 	rbit	r3, r3
 8003490:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003494:	fab3 f383 	clz	r3, r3
 8003498:	b2db      	uxtb	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	4b5e      	ldr	r3, [pc, #376]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	461a      	mov	r2, r3
 80034a4:	2301      	movs	r3, #1
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b0:	fa93 f3a3 	rbit	r3, r3
 80034b4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80034b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034b8:	fab3 f383 	clz	r3, r3
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	4b55      	ldr	r3, [pc, #340]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	461a      	mov	r2, r3
 80034c8:	2300      	movs	r3, #0
 80034ca:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034cc:	4a50      	ldr	r2, [pc, #320]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d045      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7fd faa2 	bl	8000a24 <HAL_GetTick>
 80034e0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e2:	e00a      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e4:	f7fd fa9e 	bl	8000a24 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e086      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80034fa:	2302      	movs	r3, #2
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	fa93 f3a3 	rbit	r3, r3
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
 8003506:	2302      	movs	r3, #2
 8003508:	623b      	str	r3, [r7, #32]
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	fa93 f3a3 	rbit	r3, r3
 8003510:	61fb      	str	r3, [r7, #28]
  return result;
 8003512:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003514:	fab3 f383 	clz	r3, r3
 8003518:	b2db      	uxtb	r3, r3
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f043 0302 	orr.w	r3, r3, #2
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d102      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003528:	4b39      	ldr	r3, [pc, #228]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	e007      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800352e:	2302      	movs	r3, #2
 8003530:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	4b35      	ldr	r3, [pc, #212]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	2202      	movs	r2, #2
 8003540:	613a      	str	r2, [r7, #16]
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	fa92 f2a2 	rbit	r2, r2
 8003548:	60fa      	str	r2, [r7, #12]
  return result;
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	fab2 f282 	clz	r2, r2
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	f002 021f 	and.w	r2, r2, #31
 800355c:	2101      	movs	r1, #1
 800355e:	fa01 f202 	lsl.w	r2, r1, r2
 8003562:	4013      	ands	r3, r2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0bd      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003568:	4b29      	ldr	r3, [pc, #164]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4926      	ldr	r1, [pc, #152]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003576:	4313      	orrs	r3, r2
 8003578:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800357a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800357e:	2b01      	cmp	r3, #1
 8003580:	d105      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003582:	4b23      	ldr	r3, [pc, #140]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	4a22      	ldr	r2, [pc, #136]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800358c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d008      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800359a:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	f023 0203 	bic.w	r2, r3, #3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	491a      	ldr	r1, [pc, #104]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035b8:	4b15      	ldr	r3, [pc, #84]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	f023 0210 	bic.w	r2, r3, #16
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4912      	ldr	r1, [pc, #72]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d008      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80035d6:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	490b      	ldr	r1, [pc, #44]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	4903      	ldr	r1, [pc, #12]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003602:	4313      	orrs	r3, r2
 8003604:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3748      	adds	r7, #72	; 0x48
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40021000 	.word	0x40021000
 8003614:	40007000 	.word	0x40007000
 8003618:	10908100 	.word	0x10908100

0800361c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e01d      	b.n	800366a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fd f88a 	bl	800075c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	4619      	mov	r1, r3
 800365a:	4610      	mov	r0, r2
 800365c:	f000 f974 	bl	8003948 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2201      	movs	r2, #1
 8003684:	6839      	ldr	r1, [r7, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f000 fc7c 	bl	8003f84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1c      	ldr	r2, [pc, #112]	; (8003704 <HAL_TIM_PWM_Start+0x90>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00e      	beq.n	80036b4 <HAL_TIM_PWM_Start+0x40>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1b      	ldr	r2, [pc, #108]	; (8003708 <HAL_TIM_PWM_Start+0x94>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d009      	beq.n	80036b4 <HAL_TIM_PWM_Start+0x40>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a19      	ldr	r2, [pc, #100]	; (800370c <HAL_TIM_PWM_Start+0x98>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d004      	beq.n	80036b4 <HAL_TIM_PWM_Start+0x40>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a18      	ldr	r2, [pc, #96]	; (8003710 <HAL_TIM_PWM_Start+0x9c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_TIM_PWM_Start+0x44>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <HAL_TIM_PWM_Start+0x46>
 80036b8:	2300      	movs	r3, #0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <HAL_TIM_PWM_Start+0xa0>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b06      	cmp	r3, #6
 80036de:	d00b      	beq.n	80036f8 <HAL_TIM_PWM_Start+0x84>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e6:	d007      	beq.n	80036f8 <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40012c00 	.word	0x40012c00
 8003708:	40014000 	.word	0x40014000
 800370c:	40014400 	.word	0x40014400
 8003710:	40014800 	.word	0x40014800
 8003714:	00010007 	.word	0x00010007

08003718 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800372a:	2b01      	cmp	r3, #1
 800372c:	d101      	bne.n	8003732 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800372e:	2302      	movs	r3, #2
 8003730:	e105      	b.n	800393e <HAL_TIM_PWM_ConfigChannel+0x226>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2202      	movs	r2, #2
 800373e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b14      	cmp	r3, #20
 8003746:	f200 80f0 	bhi.w	800392a <HAL_TIM_PWM_ConfigChannel+0x212>
 800374a:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800374c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003750:	080037a5 	.word	0x080037a5
 8003754:	0800392b 	.word	0x0800392b
 8003758:	0800392b 	.word	0x0800392b
 800375c:	0800392b 	.word	0x0800392b
 8003760:	080037e5 	.word	0x080037e5
 8003764:	0800392b 	.word	0x0800392b
 8003768:	0800392b 	.word	0x0800392b
 800376c:	0800392b 	.word	0x0800392b
 8003770:	08003827 	.word	0x08003827
 8003774:	0800392b 	.word	0x0800392b
 8003778:	0800392b 	.word	0x0800392b
 800377c:	0800392b 	.word	0x0800392b
 8003780:	08003867 	.word	0x08003867
 8003784:	0800392b 	.word	0x0800392b
 8003788:	0800392b 	.word	0x0800392b
 800378c:	0800392b 	.word	0x0800392b
 8003790:	080038a9 	.word	0x080038a9
 8003794:	0800392b 	.word	0x0800392b
 8003798:	0800392b 	.word	0x0800392b
 800379c:	0800392b 	.word	0x0800392b
 80037a0:	080038e9 	.word	0x080038e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f944 	bl	8003a38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0208 	orr.w	r2, r2, #8
 80037be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0204 	bic.w	r2, r2, #4
 80037ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6999      	ldr	r1, [r3, #24]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	619a      	str	r2, [r3, #24]
      break;
 80037e2:	e0a3      	b.n	800392c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 f9aa 	bl	8003b44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6999      	ldr	r1, [r3, #24]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	021a      	lsls	r2, r3, #8
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	619a      	str	r2, [r3, #24]
      break;
 8003824:	e082      	b.n	800392c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fa09 	bl	8003c44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69da      	ldr	r2, [r3, #28]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0208 	orr.w	r2, r2, #8
 8003840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69da      	ldr	r2, [r3, #28]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0204 	bic.w	r2, r2, #4
 8003850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69d9      	ldr	r1, [r3, #28]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	61da      	str	r2, [r3, #28]
      break;
 8003864:	e062      	b.n	800392c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68b9      	ldr	r1, [r7, #8]
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fa67 	bl	8003d40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69da      	ldr	r2, [r3, #28]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69d9      	ldr	r1, [r3, #28]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	021a      	lsls	r2, r3, #8
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	61da      	str	r2, [r3, #28]
      break;
 80038a6:	e041      	b.n	800392c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 faaa 	bl	8003e08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0208 	orr.w	r2, r2, #8
 80038c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0204 	bic.w	r2, r2, #4
 80038d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038e6:	e021      	b.n	800392c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fae8 	bl	8003ec4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003902:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003912:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	021a      	lsls	r2, r3, #8
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003928:	e000      	b.n	800392c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 800392a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop

08003948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a32      	ldr	r2, [pc, #200]	; (8003a24 <TIM_Base_SetConfig+0xdc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d007      	beq.n	8003970 <TIM_Base_SetConfig+0x28>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003966:	d003      	beq.n	8003970 <TIM_Base_SetConfig+0x28>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a2f      	ldr	r2, [pc, #188]	; (8003a28 <TIM_Base_SetConfig+0xe0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d108      	bne.n	8003982 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a27      	ldr	r2, [pc, #156]	; (8003a24 <TIM_Base_SetConfig+0xdc>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d013      	beq.n	80039b2 <TIM_Base_SetConfig+0x6a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003990:	d00f      	beq.n	80039b2 <TIM_Base_SetConfig+0x6a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a24      	ldr	r2, [pc, #144]	; (8003a28 <TIM_Base_SetConfig+0xe0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00b      	beq.n	80039b2 <TIM_Base_SetConfig+0x6a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a23      	ldr	r2, [pc, #140]	; (8003a2c <TIM_Base_SetConfig+0xe4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d007      	beq.n	80039b2 <TIM_Base_SetConfig+0x6a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a22      	ldr	r2, [pc, #136]	; (8003a30 <TIM_Base_SetConfig+0xe8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d003      	beq.n	80039b2 <TIM_Base_SetConfig+0x6a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a21      	ldr	r2, [pc, #132]	; (8003a34 <TIM_Base_SetConfig+0xec>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d108      	bne.n	80039c4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a0e      	ldr	r2, [pc, #56]	; (8003a24 <TIM_Base_SetConfig+0xdc>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00b      	beq.n	8003a08 <TIM_Base_SetConfig+0xc0>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a0e      	ldr	r2, [pc, #56]	; (8003a2c <TIM_Base_SetConfig+0xe4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d007      	beq.n	8003a08 <TIM_Base_SetConfig+0xc0>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a0d      	ldr	r2, [pc, #52]	; (8003a30 <TIM_Base_SetConfig+0xe8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_Base_SetConfig+0xc0>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a0c      	ldr	r2, [pc, #48]	; (8003a34 <TIM_Base_SetConfig+0xec>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d103      	bne.n	8003a10 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	615a      	str	r2, [r3, #20]
}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40014000 	.word	0x40014000
 8003a30:	40014400 	.word	0x40014400
 8003a34:	40014800 	.word	0x40014800

08003a38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f023 0201 	bic.w	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0303 	bic.w	r3, r3, #3
 8003a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f023 0302 	bic.w	r3, r3, #2
 8003a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a28      	ldr	r2, [pc, #160]	; (8003b34 <TIM_OC1_SetConfig+0xfc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00b      	beq.n	8003ab0 <TIM_OC1_SetConfig+0x78>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a27      	ldr	r2, [pc, #156]	; (8003b38 <TIM_OC1_SetConfig+0x100>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d007      	beq.n	8003ab0 <TIM_OC1_SetConfig+0x78>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a26      	ldr	r2, [pc, #152]	; (8003b3c <TIM_OC1_SetConfig+0x104>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d003      	beq.n	8003ab0 <TIM_OC1_SetConfig+0x78>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a25      	ldr	r2, [pc, #148]	; (8003b40 <TIM_OC1_SetConfig+0x108>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d10c      	bne.n	8003aca <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f023 0308 	bic.w	r3, r3, #8
 8003ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f023 0304 	bic.w	r3, r3, #4
 8003ac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a19      	ldr	r2, [pc, #100]	; (8003b34 <TIM_OC1_SetConfig+0xfc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00b      	beq.n	8003aea <TIM_OC1_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <TIM_OC1_SetConfig+0x100>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <TIM_OC1_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a17      	ldr	r2, [pc, #92]	; (8003b3c <TIM_OC1_SetConfig+0x104>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d003      	beq.n	8003aea <TIM_OC1_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a16      	ldr	r2, [pc, #88]	; (8003b40 <TIM_OC1_SetConfig+0x108>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d111      	bne.n	8003b0e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	621a      	str	r2, [r3, #32]
}
 8003b28:	bf00      	nop
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	40014000 	.word	0x40014000
 8003b3c:	40014400 	.word	0x40014400
 8003b40:	40014800 	.word	0x40014800

08003b44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	f023 0210 	bic.w	r2, r3, #16
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	021b      	lsls	r3, r3, #8
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f023 0320 	bic.w	r3, r3, #32
 8003b92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a24      	ldr	r2, [pc, #144]	; (8003c34 <TIM_OC2_SetConfig+0xf0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d10d      	bne.n	8003bc4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a1b      	ldr	r2, [pc, #108]	; (8003c34 <TIM_OC2_SetConfig+0xf0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00b      	beq.n	8003be4 <TIM_OC2_SetConfig+0xa0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a1a      	ldr	r2, [pc, #104]	; (8003c38 <TIM_OC2_SetConfig+0xf4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d007      	beq.n	8003be4 <TIM_OC2_SetConfig+0xa0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a19      	ldr	r2, [pc, #100]	; (8003c3c <TIM_OC2_SetConfig+0xf8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d003      	beq.n	8003be4 <TIM_OC2_SetConfig+0xa0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a18      	ldr	r2, [pc, #96]	; (8003c40 <TIM_OC2_SetConfig+0xfc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d113      	bne.n	8003c0c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bea:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	621a      	str	r2, [r3, #32]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40014000 	.word	0x40014000
 8003c3c:	40014400 	.word	0x40014400
 8003c40:	40014800 	.word	0x40014800

08003c44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0303 	bic.w	r3, r3, #3
 8003c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a23      	ldr	r2, [pc, #140]	; (8003d30 <TIM_OC3_SetConfig+0xec>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d10d      	bne.n	8003cc2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	021b      	lsls	r3, r3, #8
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cc0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a1a      	ldr	r2, [pc, #104]	; (8003d30 <TIM_OC3_SetConfig+0xec>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00b      	beq.n	8003ce2 <TIM_OC3_SetConfig+0x9e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a19      	ldr	r2, [pc, #100]	; (8003d34 <TIM_OC3_SetConfig+0xf0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d007      	beq.n	8003ce2 <TIM_OC3_SetConfig+0x9e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a18      	ldr	r2, [pc, #96]	; (8003d38 <TIM_OC3_SetConfig+0xf4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d003      	beq.n	8003ce2 <TIM_OC3_SetConfig+0x9e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a17      	ldr	r2, [pc, #92]	; (8003d3c <TIM_OC3_SetConfig+0xf8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d113      	bne.n	8003d0a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	621a      	str	r2, [r3, #32]
}
 8003d24:	bf00      	nop
 8003d26:	371c      	adds	r7, #28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	40012c00 	.word	0x40012c00
 8003d34:	40014000 	.word	0x40014000
 8003d38:	40014400 	.word	0x40014400
 8003d3c:	40014800 	.word	0x40014800

08003d40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	031b      	lsls	r3, r3, #12
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a16      	ldr	r2, [pc, #88]	; (8003df8 <TIM_OC4_SetConfig+0xb8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00b      	beq.n	8003dbc <TIM_OC4_SetConfig+0x7c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a15      	ldr	r2, [pc, #84]	; (8003dfc <TIM_OC4_SetConfig+0xbc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d007      	beq.n	8003dbc <TIM_OC4_SetConfig+0x7c>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a14      	ldr	r2, [pc, #80]	; (8003e00 <TIM_OC4_SetConfig+0xc0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d003      	beq.n	8003dbc <TIM_OC4_SetConfig+0x7c>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a13      	ldr	r2, [pc, #76]	; (8003e04 <TIM_OC4_SetConfig+0xc4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d109      	bne.n	8003dd0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	019b      	lsls	r3, r3, #6
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	621a      	str	r2, [r3, #32]
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40012c00 	.word	0x40012c00
 8003dfc:	40014000 	.word	0x40014000
 8003e00:	40014400 	.word	0x40014400
 8003e04:	40014800 	.word	0x40014800

08003e08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	041b      	lsls	r3, r3, #16
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a15      	ldr	r2, [pc, #84]	; (8003eb4 <TIM_OC5_SetConfig+0xac>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00b      	beq.n	8003e7a <TIM_OC5_SetConfig+0x72>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a14      	ldr	r2, [pc, #80]	; (8003eb8 <TIM_OC5_SetConfig+0xb0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d007      	beq.n	8003e7a <TIM_OC5_SetConfig+0x72>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a13      	ldr	r2, [pc, #76]	; (8003ebc <TIM_OC5_SetConfig+0xb4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d003      	beq.n	8003e7a <TIM_OC5_SetConfig+0x72>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <TIM_OC5_SetConfig+0xb8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d109      	bne.n	8003e8e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	621a      	str	r2, [r3, #32]
}
 8003ea8:	bf00      	nop
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	40014000 	.word	0x40014000
 8003ebc:	40014400 	.word	0x40014400
 8003ec0:	40014800 	.word	0x40014800

08003ec4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	051b      	lsls	r3, r3, #20
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a16      	ldr	r2, [pc, #88]	; (8003f74 <TIM_OC6_SetConfig+0xb0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00b      	beq.n	8003f38 <TIM_OC6_SetConfig+0x74>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <TIM_OC6_SetConfig+0xb4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d007      	beq.n	8003f38 <TIM_OC6_SetConfig+0x74>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a14      	ldr	r2, [pc, #80]	; (8003f7c <TIM_OC6_SetConfig+0xb8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <TIM_OC6_SetConfig+0x74>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a13      	ldr	r2, [pc, #76]	; (8003f80 <TIM_OC6_SetConfig+0xbc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d109      	bne.n	8003f4c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	029b      	lsls	r3, r3, #10
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	621a      	str	r2, [r3, #32]
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40014000 	.word	0x40014000
 8003f7c:	40014400 	.word	0x40014400
 8003f80:	40014800 	.word	0x40014800

08003f84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f003 031f 	and.w	r3, r3, #31
 8003f96:	2201      	movs	r2, #1
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a1a      	ldr	r2, [r3, #32]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	401a      	ands	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a1a      	ldr	r2, [r3, #32]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 031f 	and.w	r3, r3, #31
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	621a      	str	r2, [r3, #32]
}
 8003fc2:	bf00      	nop
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
	...

08003fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e054      	b.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a24      	ldr	r2, [pc, #144]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d108      	bne.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004018:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a17      	ldr	r2, [pc, #92]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00e      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004050:	d009      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d004      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a11      	ldr	r2, [pc, #68]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10c      	bne.n	8004080 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800406c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	4313      	orrs	r3, r2
 8004076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40012c00 	.word	0x40012c00
 80040a4:	40000400 	.word	0x40000400
 80040a8:	40014000 	.word	0x40014000

080040ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e060      	b.n	800418a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4313      	orrs	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	041b      	lsls	r3, r3, #16
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a14      	ldr	r2, [pc, #80]	; (8004198 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d115      	bne.n	8004178 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	051b      	lsls	r3, r3, #20
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	4313      	orrs	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40012c00 	.word	0x40012c00

0800419c <__libc_init_array>:
 800419c:	b570      	push	{r4, r5, r6, lr}
 800419e:	4e0d      	ldr	r6, [pc, #52]	; (80041d4 <__libc_init_array+0x38>)
 80041a0:	4c0d      	ldr	r4, [pc, #52]	; (80041d8 <__libc_init_array+0x3c>)
 80041a2:	1ba4      	subs	r4, r4, r6
 80041a4:	10a4      	asrs	r4, r4, #2
 80041a6:	2500      	movs	r5, #0
 80041a8:	42a5      	cmp	r5, r4
 80041aa:	d109      	bne.n	80041c0 <__libc_init_array+0x24>
 80041ac:	4e0b      	ldr	r6, [pc, #44]	; (80041dc <__libc_init_array+0x40>)
 80041ae:	4c0c      	ldr	r4, [pc, #48]	; (80041e0 <__libc_init_array+0x44>)
 80041b0:	f000 f820 	bl	80041f4 <_init>
 80041b4:	1ba4      	subs	r4, r4, r6
 80041b6:	10a4      	asrs	r4, r4, #2
 80041b8:	2500      	movs	r5, #0
 80041ba:	42a5      	cmp	r5, r4
 80041bc:	d105      	bne.n	80041ca <__libc_init_array+0x2e>
 80041be:	bd70      	pop	{r4, r5, r6, pc}
 80041c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041c4:	4798      	blx	r3
 80041c6:	3501      	adds	r5, #1
 80041c8:	e7ee      	b.n	80041a8 <__libc_init_array+0xc>
 80041ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041ce:	4798      	blx	r3
 80041d0:	3501      	adds	r5, #1
 80041d2:	e7f2      	b.n	80041ba <__libc_init_array+0x1e>
 80041d4:	0800423c 	.word	0x0800423c
 80041d8:	0800423c 	.word	0x0800423c
 80041dc:	0800423c 	.word	0x0800423c
 80041e0:	08004240 	.word	0x08004240

080041e4 <memset>:
 80041e4:	4402      	add	r2, r0
 80041e6:	4603      	mov	r3, r0
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d100      	bne.n	80041ee <memset+0xa>
 80041ec:	4770      	bx	lr
 80041ee:	f803 1b01 	strb.w	r1, [r3], #1
 80041f2:	e7f9      	b.n	80041e8 <memset+0x4>

080041f4 <_init>:
 80041f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f6:	bf00      	nop
 80041f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041fa:	bc08      	pop	{r3}
 80041fc:	469e      	mov	lr, r3
 80041fe:	4770      	bx	lr

08004200 <_fini>:
 8004200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004202:	bf00      	nop
 8004204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004206:	bc08      	pop	{r3}
 8004208:	469e      	mov	lr, r3
 800420a:	4770      	bx	lr
